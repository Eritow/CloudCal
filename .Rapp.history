filestring <- strsplit(filename, '[ ]')[[1]]
filestring
sub("^[^.]*", "", filename)
sub("^[^X ]*", "", filename)
sub("^[^.]*", "", filename)
strsplit(filename,"\\X ")
strsplit(filename,"\\Y ")
as.numeric(substr(strsplit(filename,"\\X "), 1, 6))
filename
as.numeric(substr(strsplit(filename,"\\X "), 1, 6))
substr(strsplit(filename,"\\X "), 1, 6)
strsplit(filename,"\\X ")
strsplit(filename,"\\X ")[[1]][2]
x <- as.numeric(substr(strsplit(filename,"\\X ")[[1]][2], 1, 6))
x
y <- as.numeric(substr(strsplit(filename,"\\Y ")[[1]][2], 1, 6))
y
read_csv_net <- function(filename){#
    x <- as.numeric(substr(strsplit(filename,"\\X ")[[1]][2], 1, 6))#
    y <- as.numeric(substr(strsplit(filename,"\\Y ")[[1]][2], 1, 6))#
    ret <- read.csv(file=filename, sep=",", header=FALSE)#
    element <- ret$Element#
    line <- ret$Line#
    net <- ret$net#
    background <- ret$Background#
    x.vector <- rep(x, length(element))#
    y.vector <- rep(y, length(element))#
    parsed.file <- data.frame(x, y, element, line, net, background)#
    colnames(parsed.file) <- c("X", "Y", "Element", "Line", "Net", "Background")#
    parsed.file#
}
read_csv_net(filename)
x <- as.numeric(substr(strsplit(filename,"\\X ")[[1]][2], 1, 6))#
    y <- as.numeric(substr(strsplit(filename,"\\Y ")[[1]][2], 1, 6))
x
y
ret <- read.csv(file=filename, sep=",", header=FALSE)
head(ret)
ret <- read.csv(file=filename, sep=",", header=TRUE)
head(ret)
read_csv_net <- function(filename){#
    x <- as.numeric(substr(strsplit(filename,"\\X ")[[1]][2], 1, 6))#
    y <- as.numeric(substr(strsplit(filename,"\\Y ")[[1]][2], 1, 6))#
    ret <- read.csv(file=filename, sep=",", header=TRUE)#
    element <- ret$Element#
    line <- ret$Line#
    net <- ret$net#
    background <- ret$Background#
    x.vector <- rep(x, length(element))#
    y.vector <- rep(y, length(element))#
    parsed.file <- data.frame(x, y, element, line, net, background)#
    colnames(parsed.file) <- c("X", "Y", "Element", "Line", "Net", "Background")#
    parsed.file#
}
read_csv_net(filename)
ret <- read.csv(file=filename, sep=",", header=TRUE)#
    element <- ret$Element#
    line <- ret$Line#
    net <- ret$net#
    background <- ret$Background
head(background)
head(ret)
background <- ret$Backgr.
head(background)
read_csv_net <- function(filename){#
    x <- as.numeric(substr(strsplit(filename,"\\X ")[[1]][2], 1, 6))#
    y <- as.numeric(substr(strsplit(filename,"\\Y ")[[1]][2], 1, 6))#
    ret <- read.csv(file=filename, sep=",", header=TRUE)#
    element <- ret$Element#
    line <- ret$Line#
    net <- ret$net#
    background <- ret$Backgr.#
    x.vector <- rep(x, length(element))#
    y.vector <- rep(y, length(element))#
    parsed.file <- data.frame(x.vector, y.vector, element, line, net, background)#
    colnames(parsed.file) <- c("X", "Y", "Element", "Line", "Net", "Background")#
    parsed.file#
}
read_csv_net(filename)
read_csv_net <- function(filename){#
    x <- as.numeric(substr(strsplit(filename,"\\X ")[[1]][2], 1, 6))#
    y <- as.numeric(substr(strsplit(filename,"\\Y ")[[1]][2], 1, 6))#
    ret <- read.csv(file=filename, sep=",", header=TRUE)#
    element <- ret$Element#
    line <- ret$Line#
    net <- ret$Net#
    background <- ret$Backgr.#
    x.vector <- rep(x, length(element))#
    y.vector <- rep(y, length(element))#
    parsed.file <- data.frame(x.vector, y.vector, element, line, net, background)#
    colnames(parsed.file) <- c("X", "Y", "Element", "Line", "Net", "Background")#
    parsed.file#
}
read_csv_net(filename)
library(shiny)
runApp("~/GitHub/Tracer Map")
install.package("rJava")
install.packages("rJava")
runApp("~/GitHub/Tracer Map")
library(rJAva)
library(rJava)
install.packages("rJava")
library(rJava)
library(shiny)
runApp("~/GitHub/Cezanne")
?scale_fill_alpha
?scale_alpha
runApp("~/GitHub/Cezanne")
?pmax
runApp("~/GitHub/Cezanne")
library(shiny)
runApp("~/GitHub/xrf-app")
library(TTR)#
library(ggplot2)#
library(gridExtra)#
library(scales)#
library(gtable)#
library(wq)
#Tool Types#
big <- read.csv(file="/Users/lee/Google Drive/Liang Bua XRF/Stone 2017/Rock Types/ChertTuff/Big-Table 1.csv")#
smalls.s <- data.frame(Information, Rb.K12, Sr.K12, Zr.K12, Zn.K12, Fe.K12)#
flores.stones.t = setNames(data.frame(t(smalls.s[,-1])), smalls.s[,1])#
fit <- pvclust(flores.stones.t, method.hclust="ward.D",#
   method.dist="euclidean")#
plot(fit) # dendogram with p values#
# add rectangles around groups highly supported by the data#
pvrect(fit, alpha=.95)
#Tool Types#
big <- read.csv(file="/Users/lee/Google Drive/Liang Bua XRF/Stone 2017/Rock Types/ChertTuff/Big-Table 1.csv")#
attach(big)#
smalls.s <- data.frame(Material, Rb.K12, Sr.K12, Zr.K12, Zn.K12, Fe.K12)#
flores.stones.t = setNames(data.frame(t(smalls.s[,-1])), smalls.s[,1])#
fit <- pvclust(flores.stones.t, method.hclust="ward.D",#
   method.dist="euclidean")#
plot(fit) # dendogram with p values#
# add rectangles around groups highly supported by the data#
pvrect(fit, alpha=.95)
library(pvclust)
#Tool Types#
big <- read.csv(file="/Users/lee/Google Drive/Liang Bua XRF/Stone 2017/Rock Types/ChertTuff/Big-Table 1.csv")#
attach(big)#
smalls.s <- data.frame(Material, Rb.K12, Sr.K12, Zr.K12, Zn.K12, Fe.K12)#
flores.stones.t = setNames(data.frame(t(smalls.s[,-1])), smalls.s[,1])#
fit <- pvclust(flores.stones.t, method.hclust="ward.D",#
   method.dist="euclidean")#
plot(fit) # dendogram with p values#
# add rectangles around groups highly supported by the data#
pvrect(fit, alpha=.95)
#Tool Types#
big <- read.csv(file="/Users/lee/Google Drive/Liang Bua XRF/Stone 2017/Rock Types/ChertTuff/Big-Table 1.csv")#
attach(big)#
smalls.s <- data.frame(Material, Rb.K12, Cu.K12, Zn.K12, Nb.K12)#
flores.stones.t = setNames(data.frame(t(smalls.s[,-1])), smalls.s[,1])#
fit <- pvclust(flores.stones.t, method.hclust="ward.D",#
   method.dist="euclidean")#
plot(fit) # dendogram with p values#
# add rectangles around groups highly supported by the data#
pvrect(fit, alpha=.95)
#Tool Types#
big <- read.csv(file="/Users/lee/Google Drive/Liang Bua XRF/Stone 2017/Rock Types/ChertTuff/Big-Table 1.csv")#
attach(big)#
smalls.s <- data.frame(Material, Rb.K12, Cu.K12, Zn.K12, Th.L1, Mn.K12, Nb.K12)#
flores.stones.t = setNames(data.frame(t(smalls.s[,-1])), smalls.s[,1])#
fit <- pvclust(flores.stones.t, method.hclust="ward.D",#
   method.dist="euclidean")#
plot(fit) # dendogram with p values#
# add rectangles around groups highly supported by the data#
pvrect(fit, alpha=.95)
#Tool Types#
big <- read.csv(file="/Users/lee/Google Drive/Liang Bua XRF/Stone 2017/Rock Types/ChertTuff/Big-Table 1.csv")#
attach(big)#
smalls.s <- data.frame(Material, Rb.K12, Cu.K12,  Th.L1, Mn.K12, Nb.K12)#
flores.stones.t = setNames(data.frame(t(smalls.s[,-1])), smalls.s[,1])#
fit <- pvclust(flores.stones.t, method.hclust="ward.D",#
   method.dist="euclidean")#
plot(fit) # dendogram with p values#
# add rectangles around groups highly supported by the data#
pvrect(fit, alpha=.95)
#Tool Types#
big <- read.csv(file="/Users/lee/Google Drive/Liang Bua XRF/Stone 2017/Rock Types/ChertTuff/Big-Table 1.csv")#
attach(big)#
smalls.s <- data.frame(Material,Rb.K12, Cu.K12, Nb.K12)#
flores.stones.t = setNames(data.frame(t(smalls.s[,-1])), smalls.s[,1])#
fit <- pvclust(flores.stones.t, method.hclust="ward.D",#
   method.dist="euclidean")#
plot(fit) # dendogram with p values#
# add rectangles around groups highly supported by the data#
pvrect(fit, alpha=.95)
smalls.s <- read.csv(file="/Users/lee/Google Drive/Liang Bua XRF/Stone 2017/Rock Types/ChertTuff/Small-Table 1.csv")#
attach(small.s)#
flores.stones.t = setNames(data.frame(t(smalls.s[,-1])), smalls.s[,1])#
fit <- pvclust(flores.stones.t, method.hclust="ward.D",#
   method.dist="euclidean")#
plot(fit) # dendogram with p values#
# add rectangles around groups highly supported by the data#
pvrect(fit, alpha=.95)
smalls.s <- read.csv(file="/Users/lee/Google Drive/Liang Bua XRF/Stone 2017/Rock Types/ChertTuff/Tiny-Table 1.csv")#
attach(small.s)#
flores.stones.t = setNames(data.frame(t(smalls.s[,-1])), smalls.s[,1])#
fit <- pvclust(flores.stones.t, method.hclust="ward.D",#
   method.dist="euclidean")#
plot(fit) # dendogram with p values#
# add rectangles around groups highly supported by the data#
pvrect(fit, alpha=.95)
smalls.s <- read.csv(file="/Users/lee/Google Drive/Liang Bua XRF/Stone 2017/Rock Types/ChertTuff/Medium-Table 1.csv")#
attach(small.s)#
flores.stones.t = setNames(data.frame(t(smalls.s[,-1])), smalls.s[,1])#
fit <- pvclust(flores.stones.t, method.hclust="ward.D",#
   method.dist="euclidean")#
plot(fit) # dendogram with p values#
# add rectangles around groups highly supported by the data#
pvrect(fit, alpha=.95)#
j
library(pvclust)#
big <- read.csv(file="/Users/lee/Google Drive/Liang Bua XRF/Stone 2017/Rock Types/ChertTuff/Big-Table 1.csv")#
attach(big)#
smalls.s <- data.frame(Material, Ca.K12, Ga.K12, Cu.K12, Nb.K12, Ge.K12)#
flores.stones.t = setNames(data.frame(t(smalls.s[,-1])), smalls.s[,1])#
fit <- pvclust(flores.stones.t, method.hclust="ward.D",#
   method.dist="euclidean")#
plot(fit) # dendogram with p values#
# add rectangles around groups highly supported by the data#
pvrect(fit, alpha=.95)
library(pvclust)#
big <- read.csv(file="/Users/lee/Google Drive/Liang Bua XRF/Stone 2017/Rock Types/ChertTuff/Big-Table 1.csv")#
attach(big)#
smalls.s <- data.frame(Material, Ca.K12, Ga.K12, Cu.K12, Nb.K12, Ge.K12, Rb.K12)#
flores.stones.t = setNames(data.frame(t(smalls.s[,-1])), smalls.s[,1])#
fit <- pvclust(flores.stones.t, method.hclust="ward.D",#
   method.dist="euclidean")#
plot(fit) # dendogram with p values#
# add rectangles around groups highly supported by the data#
pvrect(fit, alpha=.95)
library(pvclust)#
big <- read.csv(file="/Users/lee/Google Drive/Liang Bua XRF/Stone 2017/Rock Types/ChertTuff/Big-Table 1.csv")#
attach(big)#
smalls.s <- data.frame(Material,Rb.K12, Cu.K12, Zn.K12, Y.K12, Ti.K12, Ga.K12, Nb.K12, Ge.K12)#
flores.stones.t = setNames(data.frame(t(smalls.s[,-1])), smalls.s[,1])#
fit <- pvclust(flores.stones.t, method.hclust="ward.D",#
   method.dist="euclidean")#
plot(fit) # dendogram with p values#
# add rectangles around groups highly supported by the data#
pvrect(fit, alpha=.95)
runApp("~/GitHub/CloudCore")
library(shiny)
runApp("~/GitHub/CloudCore")
runApp("~/GitHub/Cezanne")
runApp("~/GitHub/CloudCore")
library(shiny)
runApp("~/GitHub/CloudCore")
x <- c(1, 2, 3, 4, 5)
x[4]
x
runApp("~/GitHub/CloudCore")
gisp2 <- read.csv(file="~/Dropbox/Documents/Utah Core/gisp2.csv")
gisp2 <- read.csv(file="~/Dropbox/Documents/University of Utah//Utah Core/gisp2.csv")
library(ggplot2)
gisp2 <- read.csv(file="~/Dropbox/Documents/University of Utah/gisp2.csv")
ls(gisp2)
lateholocene <- subset(gisp2$Age, gisp2$Age <= 5000 & gisp2$Age > -1000)#
      altithermal <- subset(gisp2$Age, gisp2$Age <= 9000 & gisp2$Age > 5000)#
      holocenetransition <- subset(gisp2$Age, gisp2$Age <= 11700 & gisp2$Age > 9000)#
      youngerdryas <- subset(gisp2$Age, gisp2$Age <= 12900 & gisp2$Age > 11700)#
      bollingalerod <- subset(gisp2$Age, gisp2$Age <= 14700 & gisp2$Age > 12900)#
      deglaciation <- subset(gisp2$Age, gisp2$Age <= 19000 & gisp2$Age > 14700)#
      lastglacialmax <- subset(gisp2$Age, gisp2$Age <= 25000 & gisp2$Age > 19000)#
      glacial <- subset(gisp2$Age, gisp2$Age <= 120000 & gisp2$Age > 25000)#
      climateperiods <- c(#
      rep("1. Late Holocene", length(lateholocene)),#
      rep("2. Altithermal", length(altithermal)),#
      rep("3. Holocene Transition", length(holocenetransition)),#
      rep("4. Younger Dryas", length(youngerdryas)),#
      rep("5. Bølling-Allerød", length(bollingalerod)),#
      rep("6. Deglaciation", length(deglaciation)),#
      rep("7. Last Glacial Maximum", length(lastglacialmax)),#
      rep("8. Glacial", length(glacial))#
      )
head(climateperiods)
gisp2$Climate <-climateperiods
climate.time.series.line <- qplot(Age,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period") +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", label=comma)+#
scale_y_continuous("Temperature (ºC)")
library(pbapply)#
library(reshape2)#
library(TTR)#
library(dplyr)#
library(data.table)#
library(ggtern)#
library(ggplot2)#
library(shiny)#
library(random)#
library(rhandsontable)#
library(Bchron)#
library(scales)
climate.time.series.line <- qplot(Age,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period") +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period") +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
gisp2$Climate <- climateperiods#
gisp2$Age2 <- gisp2$Age * -1#
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period") +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period") +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_reverse("cal yr BP", label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
gisp2 <- read.csv(file="~/Dropbox/Documents/University of Utah/gisp2.csv")
gisp2$Climate <- climateperiods#
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period") +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_reverse("cal yr BP", label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
climate.time.series.line <- qplot(Age,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period") +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_reverse("cal yr BP", label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
head(gisp2)
gisp2$Climate <- rev(climateperiods)
head(gisp2)
gisp2$Age2 <- gisp2$Age*-1
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period") +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
ggsave("~/Desktop/GIS2.jpg",climate.time.series.line, device="jpg", dpi=300, width=12, height=7)
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period") +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", limits=c(-29000, 0), label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period") +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", limits=c(-27000, -1000), label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period") +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", limits=c(-27000, -3000), label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
ggsave("~/Desktop/GIS2.jpg",climate.time.series.line, device="jpg", dpi=300, width=12, height=7)
ggplotColours <- function(n = 6, h = c(0, 360) + 15){#
  if ((diff(h) %% 360) < 1) h[2] <- h[2] - 360/n#
  hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)#
}
ggplotColours(7)
ggplotColours(8)
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_manual("Climatic Period",#
breaks=c("1. Late Holocene", "2. Altithermal", "3. Holocene Transition", "4. Younger Dryas", "5. Bølling-Allerød", "6. Deglaciation", "7. Last Glacial Maximum", "8. Glacial"),#
values=c("#F8766D", "#CD9600", "#7CAE00", "#00BE67", "#00BFC4", "#00A9FF", "#C77CFF", "#FF61CC" )) +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", limits=c(-27000, -3000), label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period", drop=FALSE) +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", limits=c(-27000, -1000), label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
gisp2 <- read.csv(file="~/Dropbox/Documents/University of Utah/gisp2.csv")
###GIPS2#
#
lateholocene <- subset(gisp2$Age, gisp2$Age <= 5000 & gisp2$Age > -1000)#
#
altithermal <- subset(gisp2$Age, gisp2$Age <= 9000 & gisp2$Age > 5000)#
#
holocenetransition <- subset(gisp2$Age, gisp2$Age <= 11700 & gisp2$Age > 9000)#
#
youngerdryas <- subset(gisp2$Age, gisp2$Age <= 12900 & gisp2$Age > 11700)#
#
bollingalerod <- subset(gisp2$Age, gisp2$Age <= 14700 & gisp2$Age > 12900)#
#
deglaciation <- subset(gisp2$Age, gisp2$Age <= 19000 & gisp2$Age > 14700)#
#
lastglacialmax <- subset(gisp2$Age, gisp2$Age <= 25000 & gisp2$Age > 19000)#
#
glacial <- subset(gisp2$Age, gisp2$Age <= 120000 & gisp2$Age > 25000)#
#
climateperiods <- c(#
rep("1. Late Holocene", length(lateholocene)),#
rep("2. Altithermal", length(altithermal)),#
rep("3. Holocene Transition", length(holocenetransition)),#
rep("4. Younger Dryas", length(youngerdryas)),#
rep("5. Bølling-Allerød", length(bollingalerod)),#
rep("6. Deglaciation", length(deglaciation)),#
rep("7. Last Glacial Maximum", length(lastglacialmax)),#
rep("8. Glacial", length(glacial))#
)#
#
gisp2$Climate <- rev(climateperiods)#
gisp2$Age2 <- gisp2$Age*-1
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period", drop=FALSE) +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", limits=c(-27000, -1000), label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
gisp2$Climate <- climateperiods#
gisp2$Age2 <- gisp2$Age*-1
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period", drop=FALSE) +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", limits=c(-27000, -1000), label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
ggsave("~/Desktop/GIS2.jpg",climate.time.series.line, device="jpg", dpi=300, width=12, height=7)
runApp("~/GitHub/CloudCore")
runApp("~/GitHub/CongressionalImpact")
runApp("~/GitHub/CongressImpact")
runApp("~/GitHub/CloudCore")
runApp("~/GitHub/Cezanne")
?interp
runApp("~/GitHub/Cezanne")
library(shiny)
runApp("~/GitHub/CloudCore")
GGSAVE
ggsave
runApp("~/GitHub/CloudCore")
ggplot2::ggsave
runApp("~/GitHub/CloudCore")
plot_dev
ggplot2::plot_dev
runApp("~/GitHub/CloudCore")
library(shiny)
runApp("~/GitHub/CloudCore")
library(shiny)
runApp("~/GitHub/Berkeley-webGeochemistry")
library(rgl)
bg3d("white") # if you want a black background#
rgl.spheres(0, 0, 0, texture="~/Dropbox/Documents/Anacom/Maps/Raw/Silicon.png", lit=FALSE)
raw <- read.csv(file="~/Dropbox/Documents/XRF-UNM-Stanford/Tokyo Test Results/Belize Total K0732/Total-Table 1.csv")
small.Ka1 <- data.frame(Rb.Ka1, Zr.Ka1, Y.Ka1, Nb.Ka1)#
#
hyp.Ka1 <- kmeans(small.Ka1, 3)#
#
plot3d(x= Rb.Ka1/Zr.Ka1, y= Sr.Ka1/Zr.Ka1, z= Y.Ka1/Zr.Ka1, zlab="Y/Zr", ylab="Sr/Zr", xlab="Rb/Zr", type="s",  size=.009, radius=.009, box=F)
####RATIOS#
ppm.plot <- qplot(Rb.ppm/Zr.ppm, Sr.ppm/Zr.ppm, data=raw, ylab = "Rb/Zr (ppm)", xlab = "Sr/Zr (ppm)", main = "Calibrated Data", colour=hyp.ppm$cluster) + theme_bw() + theme(legend.position="none") +  theme(legend.position="none")
small.Ka1 <- data.frame(Rb.Ka1, Zr.Ka1, Y.Ka1, Nb.Ka1)#
#
hyp.Ka1 <- kmeans(small.Ka1, 3)#
#
plot3d(x= Rb.Ka1/Zr.Ka1, y= Sr.Ka1/Zr.Ka1, z= Y.Ka1/Zr.Ka1, zlab="Y/Zr", ylab="Sr/Zr", xlab="Rb/Zr", type="s",  size=.009, radius=.009, box=F)
attach(raw)
small.Ka1 <- data.frame(Rb.Ka1, Zr.Ka1, Y.Ka1, Nb.Ka1)#
#
hyp.Ka1 <- kmeans(small.Ka1, 3)#
#
plot3d(x= Rb.Ka1/Zr.Ka1, y= Sr.Ka1/Zr.Ka1, z= Y.Ka1/Zr.Ka1, zlab="Y/Zr", ylab="Sr/Zr", xlab="Rb/Zr", type="s",  size=.009, radius=.009, box=F)
library(readxl)
?readxl
data <- read_excel("~/GitHub/web_geochemistry-master/inbound/Obsidian Sources.xlsx")
ls(data)
data <- read_excel("~/GitHub/web_geochemistry-master/inbound/Obsidian Sources.xlsx", 3)
ls(data)
head(data)
data <- read_excel("~/GitHub/web_geochemistry-master/inbound/Obsidian Sources.xlsx", 3, header=FALSE)
? read_excel
data <- read_excel("~/GitHub/web_geochemistry-master/inbound/Obsidian Sources.xlsx", 3, col_names=FALSE)
head(data)
data
data <- read_excel("~/GitHub/web_geochemistry-master/inbound/Obsidian Sources.xlsx", 3)
head(data)
data["Rb m"]
is.data.table(data)
data.dt <- data.table(data)
library(data.table)
data.dt <- data.table(data)
head(data.dt)
data.dt
library(shiny)
runApp("~/GitHub/Cezanne")
x <- c(1, 2)
y <- c(3, 4)
xy.frame <- data.frame(x, y)
head(xy.frame)
xy.frame[,1]
library(shiny)
runApp("~/GitHub/Cezanne")
x
y
z <- "b"
xy.frame <- data.frame(x, y, z)
xy.frame
runApp("~/GitHub/Cezanne")
x
rep(x, each=5)
data <- read.csv(file="~/GitHub/Cezanne/data/blackdiamondmelt.csv")
head(data)
Ne.Ka.frame <- subset(data, !(data$Energy < Ne.K[2]-0.02 | data$Energy > Ne.K[1]+0.02))
head(Ne.Ka.frame)
Ne.Ka.ag <- aggregate(list(Ne.Ka.frame$Counts), by=list(Ne.Ka.frame$Spectrum), FUN="sum")
Ne.Ka.ag <- aggregate(list(Ne.Ka.frame$CPS), by=list(Ne.Ka.frame$Spectrum), FUN="sum")
Ne.Ka.ag
library(shiny)
runApp("~/GitHub/CloudCore")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
?predict
?predict
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
x <- seq(1, 20, 1)
x
matrix(x, nrow=10)
data.frame(matrix(x, nrow=10))
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
####Cal Models#
#
linear.simp <- function(concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    predict.frame <- data.frame(concentration, intensity)#
    colnames(predict.frame) <- c("Concentration", "Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    cal.lm <- lm(predict.frame$Concentration~predict.frame$Intensity)#
#
    cal.lm#
}#
#
poly.simp <- function(concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    predict.frame <- data.frame(concentration, intensity)#
    colnames(predict.frame) <- c("Concentration", "Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    cal.lm.poly <- lm(predict.frame$Concentration~poly(predict.frame$Intensity, 2))#
    cal.lm.poly#
}#
#
lukas.simp <- function(concentration.table, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[intercept.element.lines]))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[slope.element.lines])#
    predict.frame.luk <- data.frame(concentration, (intensity*lukas.intercept),lukas.slope)#
    colnames(predict.frame.luk) <- c("Concentration", "Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    lukas.lm <- lm(Concentration~., data=predict.frame.luk)#
    lukas.lm#
}#
linear.tc <- function(concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    total.counts <- aggregate(CPS~Spectrum, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(concentration, intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Concentration", "Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    cal.lm.tc <- lm(predict.frame.tc$Concentration~predict.frame.tc$Intensity)#
    cal.lm.tc#
}#
#
poly.tc <- function(concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    total.counts <- aggregate(CPS~Spectrum, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(concentration, intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Concentration", "Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    cal.lm.poly.tc <- lm(predict.frame.tc$Concentration~poly(predict.frame.tc$Intensity, 2))#
    cal.lm.poly.tc#
}#
lukas.tc <- function(concentration.table, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[intercept.element.lines]))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[slope.element.lines])/total.counts$CPS#
    predict.frame.luk.tc <- data.frame(concentration, (intensity/total.counts$CPS*lukas.intercept.tc),lukas.slope.tc)#
    colnames(predict.frame.luk.tc) <- c("Concentration", "Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc <- data.frame(predict.frame.luk.tc$Intensity, lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    lukas.lm.tc <- lm(Concentration~., data=predict.frame.luk.tc)#
    lukas.lm.tc#
}#
#
linear.comp <- function(data, concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    compton.norm <- subset(data$CPS, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.file <- subset(data$Spectrum, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame(concentration, intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Concentration", "Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    cal.lm.comp <- lm(predict.frame.comp$Concentration~predict.frame.comp$Intensity)#
    cal.lm.comp#
}#
#
poly.comp <- function(data, concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    compton.norm <- subset(data$CPS, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.file <- subset(data$Spectrum, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame(concentration, intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Concentration", "Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    cal.lm.poly.comp <- lm(predict.frame.comp$Concentration~poly(predict.frame.comp$Intensity, 2))#
    cal.lm.poly.comp#
}#
#
lukas.comp <- function(data, concentration.table, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[intercept.element.lines]))/compton.frame.ag$Compton#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[slope.element.lines])/compton.frame.ag$Compton#
    predict.frame.luk.comp <- data.frame(concentration, (intensity/compton.frame.ag$Compton*lukas.intercept.comp),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Concentration", "Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    lukas.lm.comp <- lm(Concentration~., data=predict.frame.luk.comp)#
    lukas.lm.comp#
}#
simple.comp.prep <- function(data, concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    compton.norm <- subset(data$CPS, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.file <- subset(data$Spectrum, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame(concentration, intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Concentration", "Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
#
}#
###Prep Data#
#
lukas.simp.prep <- function(concentration.table, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[intercept.element.lines]))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[slope.element.lines])#
    predict.frame.luk <- data.frame(concentration, (intensity*lukas.intercept),lukas.slope)#
    colnames(predict.frame.luk) <- c("Concentration", "Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk#
}#
lukas.tc.prep <- function(concentration.table, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[intercept.element.lines]))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[slope.element.lines])/total.counts$CPS#
    predict.frame.luk.tc <- data.frame(concentration, (intensity/total.counts$CPS*lukas.intercept.tc),lukas.slope.tc)#
    colnames(predict.frame.luk.tc) <- c("Concentration", "Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc <- data.frame(predict.frame.luk.tc$Intensity, lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc#
}#
lukas.comp.prep <- function(data, concentration.table, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[intercept.element.lines]))/compton.frame.ag$Compton#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[slope.element.lines])/compton.frame.ag$Compton#
    predict.frame.luk.comp <- data.frame(concentration, (intensity/compton.frame.ag$Compton*lukas.intercept.comp),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Concentration", "Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp#
}
simple.comp.prep()
lukas.simp.prep <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    intercept.none <- rep(0, length(spectra.line.table$Spectrum))#
    lukas.intercept.table.x <- data.frame(spectra.line.table[intercept.element.lines], intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table[intercept.element.lines]), "None")#
    slope.none <- rep(1, length(spectra.line.table$Spectrum))#
    lukas.slope.table <- data.frame(spectra.line.table[slope.element.lines], slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table[slope.element.lines]), "None")#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[intercept.element.lines]))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[slope.element.lines])#
    predict.frame.luk <- data.frame((intensity*lukas.intercept),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk#
}#
lukas.tc.prep <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    intercept.none <- rep(0, length(spectra.line.table$Spectrum))#
    lukas.intercept.table.x <- data.frame(spectra.line.table[intercept.element.lines], intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table[intercept.element.lines]), "None")#
    slope.none <- rep(1, length(spectra.line.table$Spectrum))#
    lukas.slope.table <- data.frame(spectra.line.table[slope.element.lines], slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table[slope.element.lines]), "None")#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[intercept.element.lines]))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[slope.element.lines])/total.counts$CPS#
    predict.frame.luk.tc <- data.frame((intensity/total.counts$CPS*lukas.intercept.tc),lukas.slope.tc)#
    colnames(predict.frame.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc <- data.frame(predict.frame.luk.tc$Intensity, lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc#
}#
lukas.comp.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    intercept.none <- rep(0, length(spectra.line.table$Spectrum))#
    lukas.intercept.table.x <- data.frame(spectra.line.table[intercept.element.lines], intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table[intercept.element.lines]), "None")#
    slope.none <- rep(1, length(spectra.line.table$Spectrum))#
    lukas.slope.table <- data.frame(spectra.line.table[slope.element.lines], slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table[slope.element.lines]), "None")#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[intercept.element.lines]))/compton.frame.ag$Compton#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[slope.element.lines])/compton.frame.ag$Compton#
    predict.frame.luk.comp <- data.frame((intensity/compton.frame.ag$Compton*lukas.intercept.comp),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp#
}
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")

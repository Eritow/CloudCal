library(pbapply)
pblapply(results.list.names, function(x) write.xlsx2(results.list[[x]], file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=x, append=TRUE))
library(xlsx)
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
library(xlsx)
dyn.load(paste0(system2('/usr/libexec/java_home', stdout = TRUE), '/jre/lib/server/libjvm.dylib'))
library(xlsx)
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
dyn.load(paste0(system2('/usr/libexec/java_home', stdout = TRUE), '/jre/lib/server/libjvm.dylib'))
library(xlsx)
library(pbapply)
result.frame <- readRDS("~/Dropbox/Documents/Chaco/Tree Rings/Results/ResultFrame.rds")#
results.list <- readRDS("~/Dropbox/Documents/Chaco/Tree Rings/Results/ResultsList.rds")#
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")#
#
results.list.names <- names(results.list)
options(java.parameters = "-Xmx4096m")
pblapply(results.list.names, function(x) write.xlsx2(results.list[[x]], file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=x, append=TRUE))
dyn.load(paste0(system2('/usr/libexec/java_home', stdout = TRUE), '/jre/lib/server/libjvm.dylib'))
library(pbapply)
library(xlsx)
options(java.parameters = "-Xmx4096m")
jgc <- function()#
{#
  gc()#
  .jcall("java/lang/System", method = "gc")#
}
library(openxlsx)
install.packages("openxlsx")
library(openxlsx)
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
result.frame <- readRDS("~/Dropbox/Documents/Chaco/Tree Rings/Results/ResultFrame.rds")#
results.list <- readRDS("~/Dropbox/Documents/Chaco/Tree Rings/Results/ResultsList.rds")
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
results.list.names <- names(results.list)
pblapply(results.list.names, function(x) write.xlsx2(results.list[[x]], file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=x, append=TRUE))
openxlsx::write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
pblapply(results.list.names, function(x) openxlsx::write.xlsx(results.list[[x]], file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=x, append=TRUE))
openxlsx::write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
?write.xlsx
write.xlsx(results.list, "ChacoTreesFullDates.xlsx", colWidths = c(NA, "auto", "auto"))
write.xlsx(results.list, "/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/ChacoTreesFullDates.xlsx", colWidths = c(NA, "auto", "auto"))
x <- c(1, 2, 3, T)
y <- c(T, 5, 6, 7)
xy.frame <- data.frame(x, y)
xy.frame[xy.frame=="T"] <- 999
xy.frame
xy.frame <- data.frame(x, y)
xy.frame
x <- c(1, 2, 3, "T")
y <- c("T", 5, 6, 7)
xy.frame <- data.frame(x, y)
xy.frame
xy.frame[xy.frame=="T"] <- 999
xy.frame
xy.frame <- data.frame(x, y)
xy.frame[xy.frame=="T"] <- "999"
xy.frame
xy.frame <- data.frame(x, y)
xy.frame[which(xy.frame=="T", arr.ind=TRUE), 3] <- 999
xy.frame
concentration.table[concentration.table==T"] <- 999
)
xy.frame <- data.frame(x, y)
xy.frame[xy.frame ==T] <- 999
xy.frame
xy.frame[xy.frame ==as.chacter("T")] <- 999
xy.frame[xy.frame ==as.character("T")] <- 999
xy.frame
xy.frame <- data.frame(x, y)
xy.frame[xy.frame =="T"] <- as.factor(999)
xy.frame
xy.frame <- data.frame(x, y, stringsAsFactors=TRUE)
xy.frame[xy.frame =="T"] <- as.factor(999)
xy.frame
xy.frame <- data.frame(x=numeric(3), y=numeric(3))
xy.frame
xy.frame <- data.frame(x=character(3), y=character(3))
xy.frame
xy.frame <- data.frame(x=factor(3), y=factor(3))
xy.frame
xy.frame <- data.frame(x=factor, y=factor)
xy.frame <- data.frame(x, y, stringsAsFactors=FALSE)
xy.frame
xy.frame[xy.frame =="T"] <- as.factor(999)
xy.frame
xy.frame <- data.frame(x, y, stringsAsFactors=FALSE)
xy.frame[xy.frame =="T"] <- 999
xy.frame
lm(y~x, data=xy.frame)
library(shiny)
runApp("~/GitHub/CloudCal")
library(rsconnect)
deployApp("~/GitHub/CloudCal", appName="cloudCal")
x
xy.frame$x <- c()
xy.frame
runApp("~/GitHub/CloudCal")
xy.frame
runApp("~/GitHub/CloudCal")
?saveRDS
runApp("~/GitHub/CloudCal")
?saveRDS
runApp("~/GitHub/CloudCal")
?readRDS
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCore")
runApp("~/GitHub/CloudCal")
test <- readRDS("~/Desktop/booluk.quant")
str(test)
test2 <- readRDS("~/Desktop/Cal Variations/Spectra/lukasTime.quant")
str(test2)
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(rsconnect)
deployApp("~/GitHub/CloudCal", appName="cloudCal")
x <- c(1, 2, 3, 4, 5, 6)
y <- c(5, 6, 7, 8, 9)
z <- c(4, 5, 6, 7, 8)
xyz.frame <- data.frame(x, y, z)
x <- c(1, 2, 3, 4, 5)
xyz.frame <- data.frame(x, y, z)
ggplot(aes(y~.), data=xyz.frame)
x*xyz.frame
rbind(xyz.frame)
rowSums(xyz.frame)
rowMeans(xyz.frame)
runApp("~/GitHub/CloudCal")
library(shiny)
?checkboxInput
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
deployApp("~/GitHub/CloudCal", appName="cloudCal")
library(rsconnect)
deployApp("~/GitHub/CloudCal", appName="cloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
general.prep.net <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep.net <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts.net <- rowSums(spectra.line.table[length(spectra.line.table)])#
    total.counts <- data.frame(data$Spectrum, total.counts.net)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep.net <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.ag.fake.Spectrum <- data$Spectrum#
    compton.ag.fake.Compton <- rep(1, length(data$Spectrum))#
    compton.ag.fake <- data.frame(compton.ag.fake.Spectrum,compton.ag.fake.Compton)#
    colnames(compton.ag.fake) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.ag.fake$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lukas.simp.prep.net <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None")]))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[,slope.element.lines])#
    colnames(lukas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept))-lukas.intercept/(intensity+lukas.intercept)),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk#
}#
lukas.tc.prep.net <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts.net <- rowSums(spectra.line.table[length(spectra.line.table)])#
    total.counts <- data.frame(data$Spectrum, total.counts.net)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None")]))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lukas.slope.tc) <- slope.element.lines#
    predict.frame.luk.tc <- data.frame(((intensity/total.counts$CPS-lukas.intercept.tc)/(intensity/total.counts$CPS+lukas.intercept.tc)),lukas.slope.tc)#
    colnames(predict.frame.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc <- data.frame(predict.frame.luk.tc$Intensity, lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc#
}#
lukas.comp.prep.net <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.ag.fake.Spectrum <- data$Spectrum#
    compton.ag.fake.Compton <- rep(1, length(data$Spectrum))#
    compton.ag.fake <- data.frame(compton.ag.fake.Spectrum,compton.ag.fake.Compton)#
    colnames(compton.ag.fake) <- c("Spectrum", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None")]))/compton.ag.fake$Compton#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[,slope.element.lines])/compton.ag.fake$Compton#
    colnames(lukas.slope.comp) <- slope.element.lines#
    predict.frame.luk.comp <- data.frame(((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)-lukas.intercept.comp/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp#
}
####Cal Models#
#
linear.simp <- function(concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    predict.frame <- data.frame(concentration, intensity)#
    colnames(predict.frame) <- c("Concentration", "Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    cal.lm <- lm(predict.frame$Concentration~predict.frame$Intensity)#
#
    cal.lm#
}#
#
poly.simp <- function(concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    predict.frame <- data.frame(concentration, intensity)#
    colnames(predict.frame) <- c("Concentration", "Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    cal.lm.poly <- lm(predict.frame$Concentration~poly(predict.frame$Intensity, 2))#
    cal.lm.poly#
}#
#
lukas.simp <- function(concentration.table, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[intercept.element.lines]))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[slope.element.lines])#
    predict.frame.luk <- data.frame(concentration, ((1+intensity/(intensity+lukas.intercept))-lukas.intercept/(intensity+lukas.intercept)),lukas.slope)#
    colnames(predict.frame.luk) <- c("Concentration", "Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    lukas.lm <- lm(Concentration~., data=predict.frame.luk)#
    lukas.lm#
}#
linear.tc <- function(concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    total.counts <- aggregate(CPS~Spectrum, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(concentration, intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Concentration", "Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    cal.lm.tc <- lm(predict.frame.tc$Concentration~predict.frame.tc$Intensity)#
    cal.lm.tc#
}#
#
poly.tc <- function(concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    total.counts <- aggregate(CPS~Spectrum, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(concentration, intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Concentration", "Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    cal.lm.poly.tc <- lm(predict.frame.tc$Concentration~poly(predict.frame.tc$Intensity, 2))#
    cal.lm.poly.tc#
}#
lukas.tc <- function(concentration.table, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[intercept.element.lines]))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[slope.element.lines])/total.counts$CPS#
    predict.frame.luk.tc <- data.frame(concentration, ((intensity/total.counts$CPS-lukas.intercept.tc)/(intensity/total.counts$CPS+lukas.intercept.tc)),lukas.slope.tc)#
    colnames(predict.frame.luk.tc) <- c("Concentration", "Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc <- data.frame(predict.frame.luk.tc$Intensity, lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    lukas.lm.tc <- lm(Concentration~., data=predict.frame.luk.tc)#
    lukas.lm.tc#
}#
#
linear.comp <- function(data, concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    compton.norm <- subset(data$CPS, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.file <- subset(data$Spectrum, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame(concentration, intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Concentration", "Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    cal.lm.comp <- lm(predict.frame.comp$Concentration~predict.frame.comp$Intensity)#
    cal.lm.comp#
}#
#
poly.comp <- function(data, concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    compton.norm <- subset(data$CPS, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.file <- subset(data$Spectrum, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame(concentration, intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Concentration", "Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    cal.lm.poly.comp <- lm(predict.frame.comp$Concentration~poly(predict.frame.comp$Intensity, 2))#
    cal.lm.poly.comp#
}#
#
lukas.comp <- function(data, concentration.table, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[intercept.element.lines]))/compton.frame.ag$Compton#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[slope.element.lines])/compton.frame.ag$Compton#
    predict.frame.luk.comp <- data.frame(concentration, ((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)-lukas.intercept.comp/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Concentration", "Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    lukas.lm.comp <- lm(Concentration~., data=predict.frame.luk.comp)#
    lukas.lm.comp#
}#
################
###Prep Data####
################
################
###Raw Spectra###
################
general.prep <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Spectrum, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lukas.simp.prep <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None")]))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[,slope.element.lines])#
    colnames(lukas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept))-lukas.intercept/(intensity+lukas.intercept)),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk#
}#
lukas.tc.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Spectrum, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None")]))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lukas.slope.tc) <- slope.element.lines#
    test <- data.frame(lukas.slope.tc, total.counts$CPS)#
    test2 <- data.frame(lukas.slope.tc, intensity)#
    test3 <- data.frame(lukas.slope.tc, lukas.intercept.tc)#
    predict.frame.luk.tc <- data.frame(((intensity/total.counts$CPS-lukas.intercept.tc)/(intensity/total.counts$CPS+lukas.intercept.tc)),lukas.slope.tc)#
    colnames(predict.frame.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc <- data.frame(predict.frame.luk.tc$Intensity, lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc#
}#
lukas.comp.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None")]))/compton.frame.ag$Compton#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[,slope.element.lines])/compton.frame.ag$Compton#
    colnames(lukas.slope.comp) <- slope.element.lines#
    predict.frame.luk.comp <- data.frame(((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)-lukas.intercept.comp/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp#
}#
################
###Prep Data####
################
################
###Net Counts###
################
general.prep.net <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep.net <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts.net <- rowSums(spectra.line.table[length(spectra.line.table)])#
    total.counts <- data.frame(data$Spectrum, total.counts.net)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep.net <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.ag.fake.Spectrum <- data$Spectrum#
    compton.ag.fake.Compton <- rep(1, length(data$Spectrum))#
    compton.ag.fake <- data.frame(compton.ag.fake.Spectrum,compton.ag.fake.Compton)#
    colnames(compton.ag.fake) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.ag.fake$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lukas.simp.prep.net <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None")]))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[,slope.element.lines])#
    colnames(lukas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept))-lukas.intercept/(intensity+lukas.intercept)),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk#
}#
lukas.tc.prep.net <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts.net <- rowSums(spectra.line.table[length(spectra.line.table)])#
    total.counts <- data.frame(data$Spectrum, total.counts.net)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None")]))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lukas.slope.tc) <- slope.element.lines#
    predict.frame.luk.tc <- data.frame(((intensity/total.counts$CPS-lukas.intercept.tc)/(intensity/total.counts$CPS+lukas.intercept.tc)),lukas.slope.tc)#
    colnames(predict.frame.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc <- data.frame(predict.frame.luk.tc$Intensity, lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc#
}#
lukas.comp.prep.net <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.ag.fake.Spectrum <- data$Spectrum#
    compton.ag.fake.Compton <- rep(1, length(data$Spectrum))#
    compton.ag.fake <- data.frame(compton.ag.fake.Spectrum,compton.ag.fake.Compton)#
    colnames(compton.ag.fake) <- c("Spectrum", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None")]))/compton.ag.fake$Compton#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[,slope.element.lines])/compton.ag.fake$Compton#
    colnames(lukas.slope.comp) <- slope.element.lines#
    predict.frame.luk.comp <- data.frame(((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)-lukas.intercept.comp/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp#
}
runApp("~/GitHub/CloudCal")
?geom_abline
?geom_abline
####Cal Models#
#
linear.simp <- function(concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    predict.frame <- data.frame(concentration, intensity)#
    colnames(predict.frame) <- c("Concentration", "Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    cal.lm <- lm(predict.frame$Concentration~predict.frame$Intensity)#
#
    cal.lm#
}#
#
poly.simp <- function(concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    predict.frame <- data.frame(concentration, intensity)#
    colnames(predict.frame) <- c("Concentration", "Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    cal.lm.poly <- lm(predict.frame$Concentration~poly(predict.frame$Intensity, 2))#
    cal.lm.poly#
}#
#
lukas.simp <- function(concentration.table, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[intercept.element.lines]))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[slope.element.lines])#
    predict.frame.luk <- data.frame(concentration, ((1+intensity/(intensity+lukas.intercept))-lukas.intercept/(intensity+lukas.intercept)),lukas.slope)#
    colnames(predict.frame.luk) <- c("Concentration", "Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    lukas.lm <- lm(Concentration~., data=predict.frame.luk)#
    lukas.lm#
}#
linear.tc <- function(concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    total.counts <- aggregate(CPS~Spectrum, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(concentration, intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Concentration", "Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    cal.lm.tc <- lm(predict.frame.tc$Concentration~predict.frame.tc$Intensity)#
    cal.lm.tc#
}#
#
poly.tc <- function(concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    total.counts <- aggregate(CPS~Spectrum, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(concentration, intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Concentration", "Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    cal.lm.poly.tc <- lm(predict.frame.tc$Concentration~poly(predict.frame.tc$Intensity, 2))#
    cal.lm.poly.tc#
}#
lukas.tc <- function(concentration.table, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[intercept.element.lines]))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[slope.element.lines])/total.counts$CPS#
    predict.frame.luk.tc <- data.frame(concentration, ((intensity/total.counts$CPS-lukas.intercept.tc)/(intensity/total.counts$CPS+lukas.intercept.tc)),lukas.slope.tc)#
    colnames(predict.frame.luk.tc) <- c("Concentration", "Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc <- data.frame(predict.frame.luk.tc$Intensity, lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    lukas.lm.tc <- lm(Concentration~., data=predict.frame.luk.tc)#
    lukas.lm.tc#
}#
#
linear.comp <- function(data, concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    compton.norm <- subset(data$CPS, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.file <- subset(data$Spectrum, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame(concentration, intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Concentration", "Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    cal.lm.comp <- lm(predict.frame.comp$Concentration~predict.frame.comp$Intensity)#
    cal.lm.comp#
}#
#
poly.comp <- function(data, concentration.table, spectra.line.table, element.line) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    compton.norm <- subset(data$CPS, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.file <- subset(data$Spectrum, !(data$Energy < input$comptonmin | data$Energy > input$comptonmax))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame(concentration, intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Concentration", "Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    cal.lm.poly.comp <- lm(predict.frame.comp$Concentration~poly(predict.frame.comp$Intensity, 2))#
    cal.lm.poly.comp#
}#
#
lukas.comp <- function(data, concentration.table, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    concentration <- na.omit(as.vector(as.numeric(unlist(concentration.table[element.line]))))#
    intensity <- na.omit(as.vector(as.numeric(unlist(spectra.line.table[element.line]))))#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[intercept.element.lines]))/compton.frame.ag$Compton#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[slope.element.lines])/compton.frame.ag$Compton#
    predict.frame.luk.comp <- data.frame(concentration, ((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)-lukas.intercept.comp/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Concentration", "Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    lukas.lm.comp <- lm(Concentration~., data=predict.frame.luk.comp)#
    lukas.lm.comp#
}#
################
###Prep Data####
################
################
###Raw Spectra###
################
general.prep <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Spectrum, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lukas.simp.prep <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None")]))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[,slope.element.lines])#
    colnames(lukas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept))-lukas.intercept/(intensity+lukas.intercept)),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk#
}#
lukas.tc.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Spectrum, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None")]))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lukas.slope.tc) <- slope.element.lines#
    test <- data.frame(lukas.slope.tc, total.counts$CPS)#
    test2 <- data.frame(lukas.slope.tc, intensity)#
    test3 <- data.frame(lukas.slope.tc, lukas.intercept.tc)#
    predict.frame.luk.tc <- data.frame(((intensity/total.counts$CPS-lukas.intercept.tc)/(intensity/total.counts$CPS+lukas.intercept.tc)),lukas.slope.tc)#
    colnames(predict.frame.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc <- data.frame(predict.frame.luk.tc$Intensity, lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc#
}#
lukas.comp.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None")]))/compton.frame.ag$Compton#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[,slope.element.lines])/compton.frame.ag$Compton#
    colnames(lukas.slope.comp) <- slope.element.lines#
    predict.frame.luk.comp <- data.frame(((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)-lukas.intercept.comp/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp#
}#
################
###Prep Data####
################
################
###Net Counts###
################
general.prep.net <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep.net <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts.net <- rowSums(spectra.line.table[length(spectra.line.table)])#
    total.counts <- data.frame(data$Spectrum, total.counts.net)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep.net <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.ag.fake.Spectrum <- data$Spectrum#
    compton.ag.fake.Compton <- rep(1, length(data$Spectrum))#
    compton.ag.fake <- data.frame(compton.ag.fake.Spectrum,compton.ag.fake.Compton)#
    colnames(compton.ag.fake) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.ag.fake$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lukas.simp.prep.net <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None")]))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[,slope.element.lines])#
    colnames(lukas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept))-lukas.intercept/(intensity+lukas.intercept)),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk#
}#
lukas.tc.prep.net <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts.net <- rowSums(spectra.line.table[length(spectra.line.table)])#
    total.counts <- data.frame(data$Spectrum, total.counts.net)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None")]))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lukas.slope.tc) <- slope.element.lines#
    predict.frame.luk.tc <- data.frame(((intensity/total.counts$CPS-lukas.intercept.tc)/(intensity/total.counts$CPS+lukas.intercept.tc)),lukas.slope.tc)#
    colnames(predict.frame.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc <- data.frame(predict.frame.luk.tc$Intensity, lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc#
}#
lukas.comp.prep.net <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.ag.fake.Spectrum <- data$Spectrum#
    compton.ag.fake.Compton <- rep(1, length(data$Spectrum))#
    compton.ag.fake <- data.frame(compton.ag.fake.Spectrum,compton.ag.fake.Compton)#
    colnames(compton.ag.fake) <- c("Spectrum", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None")]))/compton.ag.fake$Compton#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[,slope.element.lines])/compton.ag.fake$Compton#
    colnames(lukas.slope.comp) <- slope.element.lines#
    predict.frame.luk.comp <- data.frame(((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)-lukas.intercept.comp/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp#
}
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
sum(5)
?rowSums
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
?hot_col
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
x <- c(1, 2, 3)
y <- c(4, 5, 6)
xy.frame <- data.frame(xy)
xy.frame <- data.frame(x, y)
sum(xy.frame)
xy.frame <- xy.frame*0
sum(xy.frame)
sum(xy.frame)
runApp("~/GitHub/CloudCal")
?hot_to_r
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
library(shinyjs)
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
setwd("~/GitHub/CloudCal")
runApp("")
runApp()
fluorescence.lines <- read.csv("data/FluorescenceLines.csv")
head(fluorescence.lines)
length(fluorescence.lines)
fluorescence.lines[19:23]
head(fluorescence.lines[19:23])
head(fluorescence.lines[20:23])
tail(fluorescence.lines[20:23])
tail(fluorescence.lines[1, 20:23])
tests <- fluorescence.lines[78:81,]
head(tests)
tests <- fluorescence.lines[78:83,]
tests
tests[,12]
tests[,14]
2791*12
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")

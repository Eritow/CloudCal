roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_segment(aes(x=-113, xend=-101, y=-2.3, yend=2.8), colour="grey80")+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index") +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_segment(aes(x=-113, xend=-101, y=-2.3, yend=2.8), colour="grey80")+#
geom_segment(aes(x=166, xend=180, y=-2.3, yend=2.8), colour="grey80")+#
geom_segment(aes(x=376, xend=800, y=-2.3, yend=2.8), colour="grey80")+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index") +#
theme_light()#
roman.nao
?geom_segment
?geom_area
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_segment(aes(x=-113, xend=-101, y=-2.3, yend=2.8), colour="grey80")+#
geom_segment(aes(x=166, xend=180, y=-2.3, yend=2.8), colour="grey80")+#
geom_segment(aes(x=376, xend=800, y=-2.3, yend=2.8), colour="grey80", mapping="area")+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index") +#
theme_light()#
roman.nao
?geom
??geom
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(x=-113, xend=-101, y=-2.3, yend=2.8), colour="grey80")+#
geom_rect(aes(x=166, xend=180, y=-2.3, yend=2.8), colour="grey80")+#
geom_rect(aes(x=376, xend=800, y=-2.3, yend=2.8), colour="grey80", mapping="area")+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index") +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8), colour="grey80")+#
geom_rect(aes(xmin=166, xmax=180, ymin=-2.3, ymax=2.8), colour="grey80")+#
geom_rect(aes(xmin=376, xmax=800, ymin=-2.3, ymax=2.8), colour="grey80", mapping="area")+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index") +#
theme_light()#
roman.nao
??mapping
?geom_rext
?geom_rect
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE)+#
geom_rect(aes(xmin=166, xmax=180, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE)+#
geom_rect(aes(xmin=376, xmax=800, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE, mapping="area")+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index") +#
theme_light()#
roman.nao
?geom_vline
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE)+#
geom_rect(aes(xmin=166, xmax=180, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE)+#
geom_rect(aes(xmin=376, xmax=800, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE, mapping="area")+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index") +#
theme_light()#
roman.nao
?geom_rect
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
#geom_rect(aes(xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE)+#
#geom_rect(aes(xmin=166, xmax=180, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE)+#
geom_rect(aes(NULL, NULL, xmin=376, xmax=800, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE, mapping="area")+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index") +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
#geom_rect(aes(xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE)+#
#geom_rect(aes(xmin=166, xmax=180, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE)+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=800, ymin=-2.3, ymax=2.8, colour="grey80", inherit.aes=FALSE, mapping="area")+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index") +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
#geom_rect(aes(xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE)+#
#geom_rect(aes(xmin=166, xmax=180, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=800, ymin=-2.3, ymax=2.8, colour="grey80")+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index") +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
#geom_rect(aes(xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE)+#
#geom_rect(aes(xmin=166, xmax=180, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=700, ymin=-2.3, ymax=2.8, colour="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index") +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
#geom_rect(aes(xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE)+#
#geom_rect(aes(xmin=166, xmax=180, ymin=-2.3, ymax=2.8), colour="grey80", inherit.aes=FALSE)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=700, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index") +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, colour="grey80", alpha=0.5)+#
geom_rect(aes(NUll, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, colour="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=700, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index") +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=700, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index") +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=700, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index") +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=700, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=650, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO))+#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO), lwd=2)+#
geom_line(aes(Year, NAO), colour="blue")#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO), lwd=2)+#
geom_line(aes(Year, NAO), colour="blue") +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO), lwd=2)+#
geom_line(aes(Year, NAO), colour="light blue") +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO))+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_text(aes(x=-120, y=-2.2, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_text(aes(x=-120, y=-1.2, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=-120, y=-1.2, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=-120, y=-1.2, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=150, y=-1.2, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=-120, y=-1.2, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=150, y=-1.2, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=350, y=-1.2, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=-120, y=-1.2, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=150, y=-1.2, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=350, y=-1.2, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=450, y=-1.2, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=-120, y=-1.2, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=150, y=-1.2, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=350, y=-1.2, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=500, y=-1.2, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=-120, y=-1.2, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=150, y=-1.2, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=350, y=-1.2, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=550, y=-1.2, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=350, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=360, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
?geom_text
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=360, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"), size=5)+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=360, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"), size=1)+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=360, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
?annotate
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
annotate("text", aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
annotate("text", aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
annotate("text", aes(x=360, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
annotate("text", aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
annotate("text", x=-120, y=-1.4, label="Cimbrian War")+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
annotate("text", aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
annotate("text", aes(x=360, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.5)+#
annotate("text", aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=360, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_text(aes(x=80, y=2.5, label="Pax Romana"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=360, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_text(aes(x=60, y=2, label="Pax Romana"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=360, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_text(aes(x=40, y=2, label="Pax Romana"))+#
geom_text(aes(x=220, y=2, label="Praetorian Prefecture"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=360, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_text(aes(x=40, y=2, label="Pax Romana"))+#
geom_text(aes(x=220, y=2, label="Imperial Crisis"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=360, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_text(aes(x=40, y=2, label="Pax Romana"))+#
geom_text(aes(x=250, y=2.3, label="Imperial Crisis"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=360, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_text(aes(x=40, y=1.8, label="Pax Romana"))+#
geom_text(aes(x=250, y=2.3, label="Imperial Crisis"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=360, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_text(aes(x=40, y=1.8, label="Pax Romana"))+#
geom_text(aes(x=260, y=2.3, label="Imperial Crisis"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=360, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_text(aes(x=40, y=1.8, label="Pax Romana"))+#
geom_text(aes(x=270, y=2.3, label="Imperial Crisis"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=360, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 1000)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
ggsave(roman.nao, file="/Users/lee/Dropbox/Documents/GISP and Civilization/NAORome.tiff", device="tiff", dpi=300)
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_text(aes(x=40, y=1.8, label="Pax Romana"))+#
geom_text(aes(x=270, y=2.3, label="Imperial Crisis"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=360, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 750)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_text(aes(x=40, y=1.8, label="Pax Romana"))+#
geom_text(aes(x=270, y=2.3, label="Imperial Crisis"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=150, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=376, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 750)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_text(aes(x=40, y=1.8, label="Pax Romana"))+#
geom_text(aes(x=270, y=2.3, label="Imperial Crisis"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=-120, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=175, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=376, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 750)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
roman.nao <- ggplot(nao.index) +#
geom_line(aes(Year, NAO))+#
geom_text(aes(x=40, y=1.8, label="Pax Romana"))+#
geom_text(aes(x=270, y=2.3, label="Imperial Crisis"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=-106, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=175, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=376, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 750)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3)) +#
theme_light()#
roman.nao
ggsave(roman.nao, file="/Users/lee/Dropbox/Documents/GISP and Civilization/NAORome.tiff", device="tiff", dpi=300)
###Load Packages#
library(TTR)#
library(ggplot2)#
library(gridExtra)#
library(scales)#
library(gtable)#
library(wq)#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape2)#
library(pbapply)#
library(xlsx)#
library(data.table)#
library(dplyr)#
library(akima)#
library(ggmap)#
library(ggthemes)#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#####Collapse Dates#
collapse.the.dates.begin <- function(sites, biogeo, general, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, biogeo, general, dates, sigma)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
#
collapse.the.dates.taxa <- function(sites, biogeo, general, dates, sigma, taxa) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, biogeo, general, dates, sigma)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma", "Taxa")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
####Function to organize plots in a window#
layOut = function(...) {#
    require(grid)#
    x <- list(...)#
    n <- max(sapply(x, function(x) max(x[[2]])))#
    p <- max(sapply(x, function(x) max(x[[3]])))#
    pushViewport(viewport(layout = grid.layout(n, p)))#
    for (i in seq_len(length(x))) {#
        print(x[[i]][[1]], vp = viewport(layout.pos.row = x[[i]][[2]],#
        layout.pos.col = x[[i]][[3]]))#
    }#
}#
#
####Function to maintain significant digits in plot#
fmt <- function(){#
    function(x) format(x,nsmall = 4,scientific = FALSE)#
}#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#
###Multicore apply function with status bar#
mcpblapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    if (!is.vector(X) || is.object(X))#
    X <- as.list(X)#
    B <- length(X)#
    if (!(interactive() && dopb() && B >= 1))#
    return(mclapply(X, FUN, ...#
    ))#
    pb <- startpb(0, B)#
    rval <- vector("list", B)#
    for (i in 1:B) {#
        rval[i] <- list(FUN(X[[i]], ...))#
        setpb(pb, i)#
    }#
    close(pb)#
    names(rval) <- names(X)#
    rval#
}#
#
mcpbsapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    answer <- mcpblapply(X = X, FUN = FUN,  ..., USE.NAMES = TRUE)#
    if (USE.NAMES && is.character(X) && is.null(names(answer)))#
    names(answer) <- X#
    if (!identical(simplify, FALSE) && length(answer))#
    simplify2array(answer, higher = (simplify == "array"))#
    else answer#
}#
#
mcreplicate <- function(n, expr, simplify = "array", mc.cores = getOption("mc.cores", 2L)) {#
    mcpbsapply(integer(n), eval.parent(substitute(function(...) expr)), mc.cores = getOption("mc.cores", 2L),#
    simplify = simplify)#
}#
conf.loess <- function(x, sigma, n, reps, xmin, xmax) {#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.age <- sample(x, size=n, replace=TRUE)#
        samp.dist <- sapply(1:n, function(x) rnorm(500, samp.age, 85))#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (replicate(reps, makeloess(res.t, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
taphonomic.correct <- function(stack.14C.data) {#
    df <- stack.14C.data#
    n.t <- 5.726442*(10^6)*(df$Age + 2176.4)^-1.3925309#
    lambda <- 1.3925309/(2176.4+df$Age)*100#
    lambda.r <- 1-lambda#
    n.t.relative <- n.t/128.8192#
    df$Counts.Corrected <-df$Counts/n.t.relative#
    count.mod.sum <- sum(df$Counts.Corrected)#
    df$Density.Corrected <- df$Counts.Corrected/count.mod.sum#
    return(df)#
}#
#
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
    date <- c(date, 100)#
    sigma <- c(sigma, 50)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
#######
stack.14C <- function(x, sigma, xmin, xmax, taxa){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
stack.14C.taxa <- function(date, sigma, xmin, xmax, lat, long, taxa){#
    date <- c(date, 49000)#
    sigma <- c(sigma, 4900)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    taxa <- c(taxa, "blank")#
    date.frame <- data.frame(date, sigma, lat, long, taxa)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    names(coord.sub) <- c(".id", "Lat", "Long", "Taxa")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame$Taxa <- coord.sub$Taxa#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    taxa.frame <- samp.frame[, list(Taxa=Taxa, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(taxa.frame$Taxa, lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Taxa", "Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
#
taxa.data <- function(stack.14C.taxa.object, taxa.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==taxa.names)#
    temp.df <- data.frame(temp.df.1$ageGrid, factor(temp.df.1$Taxa))#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
#
    samp.hist <- data.frame(samp.mids.df[1], samp.mids.df[2], samp.counts.df[2], samp.density.df[2])#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
#
taxa.data.single <- function(stack.14C.taxa.object, taxa.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==taxa.names)#
    temp.df <- data.frame(temp.df.1$ageGrid, factor(temp.df.1$Taxa))#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    samp.hist <- data.frame(samp.mids.df[1], samp.counts.df[1], samp.density.df[1])#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
median.stack.14C <- function(x, sigma, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    n <- length(medians.all)#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
######Function to Generate Confidence Bands around SCDRD#
conf.cal.loess <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd, samp.ages$.id)#
    colnames(samp.frame) <- c("Mean", "Sd", "Id")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma*2#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma*2#
    id.frame <- samp.frame[, list(Id=Id, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    colnames(id.frame) <- c("Id", "ageGrid")#
    res.by <- by(samp.frame$ageGrid, samp.frame$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.frame$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
#
###Traditional SCDPD#
BchronDensityCollapse <- function (dates, sigma, sites,  dfs = rep(100, length(dates)), numMix = 30,#
iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE, collapse.dates=FALSE)#
{#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    pathToCalCurves = system.file("data",#
    package = "Bchron")#
    calCurves <- rep("intcal13", length(date.data$Date))#
    ages <- date.data$Date#
    ageSds <- date.data$Sigma#
    if (length(ages) != length(ageSds))#
    stop("ages and 1-sigma errors must be same length")#
    if (length(ages) != length(calCurves))#
    stop("ages and Calibration curves must be same length")#
    x = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, eps = 0, dfs = rep(100,#
    length(ages)))#
    xSmall = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, dfs = rep(100, length(ages)))#
    n = length(x)#
    thetaRange = range(xSmall[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, xSmall[[i]]$ageGrid))#
    offset = vector(length = n)#
    for (i in 1:n) {#
        offset[i] = ifelse(x[[i]]$calCurve == "normal", 61, 0)#
    }#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    clrInv = function(phi) {#
        return(exp(phi)/sum(exp(phi)))#
    }#
    J = numMix#
    mu = seq(thetaRange[1], thetaRange[2], length = numMix)#
    theta = vector(length = n)#
    for (j in 1:n) theta[j] = round(stats::rnorm(1, mean = x[[j]]$ageGrid[match(max(x[[j]]$densities),#
    x[[j]]$densities)], sd = ageSds[j]), 3)#
    phi = c(stats::runif(J - 1, -10, 10), 0)#
    p = as.numeric(clrInv(phi))#
    G = gbase(theta, mu)#
    remaining = (iterations - burn)/thin#
    thetaStore = matrix(ncol = length(theta), nrow = remaining)#
    pStore = matrix(ncol = J, nrow = remaining)#
    thetaAll = matrix(NA, ncol = n, nrow = iterations)#
    for (j in 1:n) thetaAll[, j] = sample(xSmall[[j]]$ageGrid,#
    size = iterations, prob = xSmall[[j]]$densities, replace = TRUE)#
    mu2 = mu#
    sigma2 = (mu[2] - mu[1])/2#
    my_dnorm = function(x) stats::dnorm(x, mean = mu2, sd = sigma2)#
    pb = utils::txtProgressBar(min = 1, max = iterations, style = 3,#
    width = 60, title = "Running BchronDensity")#
    for (i in 1:iterations) {#
        utils::setTxtProgressBar(pb, i)#
        if (i > burn & i%%thin == 0) {#
            ind = (i - burn)/thin#
            thetaStore[ind, ] = theta#
            pStore[ind, ] = p#
        }#
        if (updateAges) {#
            for (j in 1:n) {#
                thetaNew = round(stats::rnorm(1, theta[j], 0.5),#
                3)#
                thetaNewMatch = as.integer(thetaNew + offset[j]) +#
                1#
                thetaNewLogDens = max(log(x[[j]]$densities[thetaNewMatch]),#
                -1e+06)#
                priorNew.dens = sum(p * stats::dnorm(thetaNew,#
                mean = mu2, sd = sigma2))#
                thetaMatch = as.integer(theta[j] + offset[j]) +#
                1#
                thetaLogDens = max(log(x[[j]]$densities[thetaMatch]),#
                -1e+06)#
                priorDens = sum(p * stats::dnorm(theta[j], mean = mu2,#
                sd = sigma2))#
                logRtheta = thetaNewLogDens - thetaLogDens +#
                log(priorNew.dens) - log(priorDens)#
                if (stats::runif(1) < exp(logRtheta))#
                theta[j] = thetaNew#
            }#
        }#
        else {#
            theta = thetaAll[i, ]#
        }#
        for (j in 1:(J - 1)) {#
            phiNew = stats::rnorm(1, phi[j], 1)#
            phiAllNew = phi#
            phiAllNew[j] = phiNew#
            pNew = as.numeric(clrInv(phiAllNew))#
            phiNewLogDens = sum(log(G %*% pNew))#
            phiLogDens = sum(log(G %*% p))#
            logRphi = phiNewLogDens - phiLogDens + stats::dunif(phiNew,#
            -10, 10, log = TRUE) - stats::dunif(phi[j], -10,#
            10, log = TRUE)#
            if (stats::runif(1) < exp(logRphi)) {#
                phi[j] = phiNew#
                p = as.numeric(clrInv(phi))#
            }#
        }#
    }#
    output = list(theta = thetaStore, p = pStore, mu = mu, calAges = xSmall,#
    G = G)#
    class(output) = "BchronDensityRun"#
    return(output)#
}#
#
###Function to modify existing SCDPD from BchronDensity (modified from Bchron)#
SlugDens.t <- function (x, xmin, xmax)#
{#
    n = length(x$calAges)#
    thetaRange = range(x$calAges[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, x$calAges[[i]]$ageGrid))#
    dateGrid = seq(xmin, xmax, length = 1000)#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    Gstar = gbase(dateGrid, x$mu)#
    dens = vector(length = length(dateGrid))#
    for (i in 1:nrow(x$p)) {#
        dens = dens + Gstar %*% x$p[i, ]#
    }#
    densFinal = dens/sum(dens)#
    slugbase <- data.frame(dateGrid,densFinal)#
    colnames(slugbase) <- c("Age", "Density")#
    slugbase <- arrange(slugbase, desc(Age))#
    return(slugbase)#
}#
#
SlugSig <- function(x, sigma, n, reps, xmin, xmax) {#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronDensity(x, sigma, samp.intcal, numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
    samp.hist <- SlugDens.t(samp.slugdens, xmin, xmax)#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronDensity(samp.14C, samp.sig, rep("intcal13", n), numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
        samp.dist <- SlugDens.t(samp.dist.n, xmin, xmax)#
        samp.loess <- lowess(samp.dist$Age, samp.dist$Density, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(samp.hist$Age, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(samp.hist$Age, samp.hist$Density, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="samp.hist.Age"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
####Function to maintain significant digits in plot#
fmt <- function(){#
    function(x) format(x,nsmall = 4,scientific = FALSE)#
}#
collapse.the.dates.begin <- function(sites, region, taxa, dates, sigma, lat, long, datemin, datemax) {#
    n.t <- rep(100, length(sites))#
    df.1 <- data.frame(sites, region, dates, sigma, lat, long)#
    colnames(df.1) <- c("Site", "Region", "X14C.year", "Sigma", "Lat", "Long")#
    df <- subset(df.1, df.1$X14C.year < datemax & df.1$X14C.year > datemin)#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Region))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),3]-df[2:nrow(df), 3]))/((sqrt(df[2:nrow(df), 4]^2 + df[1:(nrow(df)-1),4]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),7], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(df$Site))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
collapse.the.dates.taxa <- function(sites, region, taxa, dates, sigma, lat, long, datemin, datemax) {#
    n.t <- rep(100, length(sites))#
    df.1 <- data.frame(sites, region, dates, sigma, lat, long, taxa)#
    colnames(df.1) <- c("Site", "Region", "X14C.year", "Sigma", "Lat", "Long", "Taxa")#
    df <- subset(df.1, df.1$X14C.year < datemax & df.1$X14C.year > datemin)#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Region))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),3]-df[2:nrow(df), 3]))/((sqrt(df[2:nrow(df), 4]^2 + df[1:(nrow(df)-1),4]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),8], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(df$Site))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
#
site.median <- function(sites, region, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, region, dates, sigma)#
    colnames(df) <- c("Site", "Region", "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Region))#
    df <- arrange(df, desc(Site))#
       df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(df[nrow(df)] > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
site.time <- function(sites, dates, sigma, xmin, xmax, time) {#
    df <- data.frame(sites, dates, sigma)#
    colnames(df) <- c("Site",  "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    site.frame <- aggregate(x=df$X14C.year, by=list(df$Site), FUN=mean)#
    site.vector <- site.frame$x#
    site.frame.sig <- aggregate(x=df$Sigma, by=list(df$Site), FUN=mean)#
    site.vector.sig <- site.frame.sig$x#
    samp.intcal <- rep("intcal13", length(site.vector))#
    samp.slugdens <- BchronCalibrate(site.vector, site.vector.sig, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    median.simple <- round((medians/100000), digits=2)*100000#
    median.table <- table(median.simple)#
    median.values <- as.numeric(paste(median.table))#
    median.frame <- data.frame(t(median.values))#
    colnames(median.frame) <- names(median.table)#
    median.t <- data.frame(t(median.frame))#
    median.df <- data.frame(add_rownames(median.t, "VALUE"))#
    colnames(median.df) <- c("Millenium", "Site")#
    median.df <- median.df[with(median.df, order(as.numeric(Millenium))), ]#
    null <- rep(0, length(time))#
    null.frame <- t(data.frame(null))#
    colnames(null.frame) <- time#
    null.t <- data.frame(t(null.frame))#
    null.df <- data.frame(add_rownames(null.t, "VALUE"))#
    colnames(null.df) <- c("Millenium", "Site")#
    all.frame <- merge(null.df, median.df, all=TRUE, by="Millenium")#
    all.frame[is.na(all.frame)] <- 0#
    all.frame <- all.frame[with(all.frame, order(as.numeric(Millenium))), ]#
    the.result <- data.frame(all.frame$Millenium, all.frame$Site.y)#
    colnames(the.result) <- c("Millenium", "Sites")#
    scaled <- as.vector(apply(data.frame(the.result$Sites), 2, function(x) scale(x)))#
    scaled.mean <- mean(scaled)#
    scaled.sd <- sd(scaled)#
    the.result$z.score <- (scaled-scaled.mean)/scaled.sd#
    the.result$p.value <- pnorm(the.result$z.score, lower.tail=FALSE)#
    return(format(the.result, digits=2))#
#
}#
median.stack.14C <- function(dates, sigma, sites, xmin, xmax, time){#
    samp.intcal <- rep("intcal13", length(dates))#
    samp.slugdens <- BchronCalibrate(dates, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    median.simple <- round((medians/100000), digits=2)*100000#
    median.table <- table(median.simple)#
    median.values <- as.numeric(paste(median.table))#
    median.frame <- data.frame(t(median.values))#
    colnames(median.frame) <- names(median.table)#
    median.t <- data.frame(t(median.frame))#
    median.df <- data.frame(add_rownames(median.t, "VALUE"))#
    colnames(median.df) <- c("Millenium", "Site")#
    median.df <- median.df[with(median.df, order(as.numeric(Millenium))), ]#
    null <- rep(0, length(time))#
    null.frame <- t(data.frame(null))#
    colnames(null.frame) <- time#
    null.t <- data.frame(t(null.frame))#
    null.df <- data.frame(add_rownames(null.t, "VALUE"))#
    colnames(null.df) <- c("Millenium", "Site")#
    all.frame <- merge(null.df, median.df, all=TRUE, by="Millenium")#
    all.frame[is.na(all.frame)] <- 0#
    all.frame <- all.frame[with(all.frame, order(as.numeric(Millenium))), ]#
    the.result <- data.frame(all.frame$Millenium, all.frame$Site.y)#
    colnames(the.result) <- c("Millenium", "Sites")#
#
    scaled <- as.vector(apply(data.frame(the.result$Sites), 2, function(x) scale(x)))#
    scaled.mean <- mean(scaled)#
    scaled.sd <- sd(scaled)#
    the.result$z.score <- (scaled-scaled.mean)/scaled.sd#
    the.result$p.value <- pnorm(the.result$z.score, lower.tail=FALSE)#
    return(format(the.result, digits=2))#
}#
site.time.half <- function(sites, dates, sigma, xmin, xmax, time) {#
    df <- data.frame(sites, dates, sigma)#
    colnames(df) <- c("Site",  "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    site.frame <- aggregate(x=df$X14C.year, by=list(df$Site), FUN=mean)#
    site.vector <- site.frame$x#
    site.frame.sig <- aggregate(x=df$Sigma, by=list(df$Site), FUN=mean)#
    site.vector.sig <- site.frame.sig$x#
    samp.intcal <- rep("intcal13", length(site.vector))#
    samp.slugdens <- BchronCalibrate(site.vector, site.vector.sig, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
median.stack.14C.half <- function(x, sigma, sites, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}
humans.audited <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/Humans Audited.csv")
humans.data<- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/Humans Audited.csv")#
#
human.data <- collapse.the.dates.begin(sites=human.data$Site_name, region=human.data$Region, dates=human.data$X14C.year, sigma=human.data$Sigma, lat=human.data$Lat, long=human.data$Long, datemin = 100, datemax = 45000)
#######SCDRD#
human.data<- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/Humans Audited.csv")#
#
human.data <- collapse.the.dates.begin(sites=human.data$Site_name, region=human.data$Region, dates=human.data$X14C.year, sigma=human.data$Sigma, lat=human.data$Lat, long=human.data$Long, datemin = 100, datemax = 45000)
human.data<- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/Humans Audited.csv")
ls(human.data)
human.data <- collapse.the.dates.begin(sites=human.data$Site_name, region=human.data$Country, dates=human.data$X14C.year, sigma=human.data$Sigma, lat=human.data$Lat, long=human.data$Long, datemin = 100, datemax = 45000)
head(human.data)
unique(human.data$Region)
northern.europe <- c("Germany", "Denmark", "Poland", "Sweden", "Norway", "Netherlands", "Hungary", "France", "Czech Republic", "Belgium", "Austria")
northern.europe
northern.europe.countries <- c("Germany", "Denmark", "Poland", "Sweden", "Norway", "Netherlands", "Hungary", "France", "Czech Republic", "Belgium", "Austria")
northern.europe <- subset(human.data, human.data$Region==northern.europe.countires)
northern.europe.countries <- c("Germany", "Denmark", "Poland", "Sweden", "Norway", "Netherlands", "Hungary", "France", "Czech Republic", "Belgium", "Austria")
northern.europe <- subset(human.data, human.data$Region==northern.europe.countires)
northern.europe <- subset(human.data, human.data$Region==northern.europe.countries)
head(northern.europe)
length(northern.europe$Site)
northern.europe$Region
northern.europe$X14.C
northern.europe$X14C.year
ls(northern.europe)
north.europe.14C <- stack.14C(northern.europe$X14C.year, northern.europe$Sigma, xmin=0, xmax= 40000)
head(north.europe.14C)
north.euro.plot <- ggplot(north.europe.14C) +#
geom_line(aes(Age, Density)) +#
theme_light()#
north.euro.plot
north.euro.plot <- ggplot(north.europe.14C) +#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 750)) +#
theme_light()#
north.euro.plot
human.data<- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/CARD June 2016.csv")
head(human.data)
human.data<- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/CARD June 2016.csv")
human.data<- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/CARD.csv")
countries <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/Humans Audited.csv")
ls(countries)
north.cen.sub <- subset(countries, countries$Country==northern.europe.countries)
head(north.cen.sub)
range(north.cen.sub$Lat)
range(as.vector(north.cen.sub$Lat))
range(as.numeric(as.vector(north.cen.sub$Lat)))
range(as.numeric(as.vector(north.cen.sub$Long)))
human.data <- subset(human.data, human.data$Lat < 62)
human.data <- subset(human.data, human.data$Lat < 62)#
human.data <- subset(human.data, human.data$Lat > 43)#
human.data <- subset(human.data, human.data$Long < 22)#
human.data <- subset(human.data, human.data$Long > -1.196)
human.data <- collapse.the.dates.begin(sites=human.data$Site_name, region=human.data$Country, dates=human.data$X14C.year, sigma=human.data$Sigma, lat=human.data$Lat, long=human.data$Long, datemin = 100, datemax = 45000)
length(human.data$Lat)
ls(human.data)
human.data<- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/CARD.csv")
ls(human.data)
length(human.data$Longitude)
human.data <- subset(human.data, human.data$Latitude < 62)#
human.data <- subset(human.data, human.data$Latitude > 43)#
human.data <- subset(human.data, human.data$Longitude < 22)#
human.data <- subset(human.data, human.data$Longitude > -1.196)
length(human.data$Longitude)
human.data <- collapse.the.dates.begin(sites=human.data$Site.name, region=human.data$Context, dates=human.data$Measured.age, sigma=human.data$NA.Sigma, lat=human.data$Latitude, long=human.data$Longitude, datemin = 100, datemax = 45000)
head(human.data)
human.data <- collapse.the.dates.begin(sites=human.data$Site.name, region=human.data$Context, dates=human.data$Normalized.age, sigma=human.data$NA.Sigma, lat=human.data$Latitude, long=human.data$Longitude, datemin = 100, datemax = 45000)
head(human.data)
human.data<- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/CARD.csv")#
#
human.data <- subset(human.data, human.data$Latitude < 62)#
human.data <- subset(human.data, human.data$Latitude > 43)#
human.data <- subset(human.data, human.data$Longitude < 22)#
human.data <- subset(human.data, human.data$Longitude > -1.196)#
northern.europe <- collapse.the.dates.begin(sites=human.data$Site.name, region=human.data$Context, dates=human.data$Normalized.age, sigma=human.data$NA.Sigma, lat=human.data$Latitude, long=human.data$Longitude, datemin = 100, datemax = 45000)
north.europe.14C <- stack.14C(northern.europe$X14C.year, northern.europe$Sigma, xmin=0, xmax= 40000)
north.euro.plot <- ggplot(north.europe.14C) +#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 750)) +#
theme_light()#
north.euro.plot
mid.east <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/Middle East 14C Database/Strict Audit-Table 1.csv")
ls(mid.east)
head(mid.east)
mid.east <- collapse.the.dates.begin(sites=mid.east$Site, region=mid.east$Subregion, dates=mid.east$Date.BP, sigma=mid.east$X., lat=mid.east$Coord..E, long=mid.east$Coord..N, datemin = 100, datemax = 45000)
head(mid.east$X.)
head(mid.east$Date.BP)
as.numeric(as.vector(head(mid.east$Date.BP)))
mid.east <- collapse.the.dates.begin(sites=mid.east$Site, region=mid.east$Subregion, dates=as.numeric(as.vector(mid.east$Date.BP)), sigma=as.numeric(as.vector(mid.east$X.)), lat=mid.east$Coord..E, long=mid.east$Coord..N, datemin = 100, datemax = 45000)
head(mid.east)
mid.east.stack <- stack.14C(mid.east$X14C.year, mid.east$Sigma, xmin=0, xmax= 40000)
mid.east.plot <- ggplot(mid.east.stack) +#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD", limits = c(-4000, 750)) +#
theme_light()#
mid.east.plot
mid.east.plot <- ggplot(mid.east.stack) +#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD", limits = c(-7000, 0)) +#
theme_light()#
mid.east.plot
####Middle East#
mid.east <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/Middle East 14C Database/Audited-Table 1.csv")#
mid.east <- collapse.the.dates.begin(sites=mid.east$Site, region=mid.east$Subregion, dates=as.numeric(as.vector(mid.east$Date.BP)), sigma=as.numeric(as.vector(mid.east$X.)), lat=mid.east$Coord..E, long=mid.east$Coord..N, datemin = 100, datemax = 45000)#
mid.east.stack <- stack.14C(mid.east$X14C.year, mid.east$Sigma, xmin=0, xmax= 40000)#
#
mid.east.plot <- ggplot(mid.east.stack) +#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD", limits = c(-7000, 0)) +#
theme_light()#
mid.east.plot
near.east <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/Near East/Audited-Table 1.csv")
ls(near.east)
head(near.east)
near.east <- collapse.the.dates.begin(sites=mid.east$SITE, region=mid.east$COUNTRY, dates=as.numeric(as.vector(mid.east$C14AGE)), sigma=as.numeric(as.vector(mid.east$C14STD)), lat=mid.east$LATITUDE, long=mid.east$LONGITUDE, datemin = 100, datemax = 45000)
near.east <- collapse.the.dates.begin(sites=near.east$SITE, region=near.east$COUNTRY, dates=as.numeric(as.vector(near.east$C14AGE)), sigma=as.numeric(as.vector(near.east$C14STD)), lat=near.east$LATITUDE, long=near.east$LONGITUDE, datemin = 100, datemax = 45000)
near.east.stack <- stack.14C(near.east$X14C.year, near.east$Sigma, xmin=0, xmax= 40000)#
#
near.east.plot <- ggplot(near.east.stack) +#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD", limits = c(-7000, 0)) +#
theme_light()#
near.east.plot
near.east.plot <- ggplot(near.east.stack) +#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD", limits = c(-12000, 0)) +#
theme_light()#
near.east.plot
####Aegean#
aegean <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/Middle East 14C Database/Audited-Table 1.csv")#
aegean <- collapse.the.dates.begin(sites=aegean$Site, region=aegean$Subregion, dates=as.numeric(as.vector(aegean$Date.BP)), sigma=as.numeric(as.vector(aegean$X.)), lat=aegean$Coord..E, long=aegean$Coord..N, datemin = 100, datemax = 45000)#
aegean.stack <- stack.14C(aegean$X14C.year, aegean$Sigma, xmin=0, xmax= 40000)#
#
aegean.plot <- ggplot(aegean.stack) +#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD", limits = c(-7000, 0)) +#
theme_light()#
aegean.plot
mid.east <- data.frame(near.east.stack, aegean.stack)#
mid.east$Area <- c(rep("Near East", length(near.east.stack$Age)), rep("Aegean", length(aegean.stack$Age)))
head(mid.east)
c(rep("Near East", length(near.east.stack$Age)), rep("Aegean", length(aegean.stack$Age)))
length(mid.east$Age)
###Together Plot#
mid.east.age <- c(near.east.stack$Age, aegean.stack$Age)#
mid.east.density <- c(near.east.stack$Density, aegean.stack$Density)#
mid.east.area <- c(rep("Near East", length(near.east.stack$Age)), rep("Aegean", length(aegean.stack$Age)))#
#
mid.east.frame <- data.frame(mid.east.age, mid.east.density, mid.east.area)
colnames(mid.east.frame) <- c("Age", "Density", "Area")
mid.east.plot <- ggplot(mid.east.frame) +#
geom_line(aes(1950-Age, Density, linetype=Area)) +#
scale_x_continuous("Year BC/AD", limits = c(-12000, 0)) +#
theme_light()#
mid.east.plot
mid.east.plot <- ggplot(mid.east.frame) +#
geom_line(aes(Age, Density, linetype=Area)) +#
scale_x_continuous("cal date BP", limits = c(-12000, 0)) +#
theme_light()#
mid.east.plot
mid.east.plot <- ggplot(mid.east.frame) +#
geom_line(aes(Age, Density, linetype=Area)) +#
scale_x_reverse("cal date BP", limits = c(12000, 0)) +#
theme_light()#
mid.east.plot
mid.east.plot <- ggplot(mid.east.frame) +#
geom_line(aes(Age, Density, linetype=Area)) +#
scale_x_reverse("cal date BP", limits = c(15000, 0)) +#
theme_light()#
mid.east.plot
ls(middle.east)
middle.east <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/Early Agriculture.csv")
ls(middle.east)
middle.east.14C <- stack.14C.taxa(middle.east$Date.BP, middle.east$Sigma, xmin=0, xmax= 40000, lat=Coord..N, long=coord..E, taxa=Subregion)
middle.east.14C <- stack.14C.taxa(middle.east$Date.BP, middle.east$Sigma, xmin=0, xmax= 40000, lat=middle.east$Coord..N, long=middle.east$Coord..E, taxa=middle.east$Subregion)
middle.east.14C <- stack.14C.taxa(middle.east$Date.BP, middle.east$Sigma, xmin=100, xmax= 40000, lat=middle.east$Coord..N, long=middle.east$Coord..E, taxa=middle.east$Subregion)
stack.14C.taxa <- function(date, sigma, xmin, xmax, lat, long, taxa){#
    date <- c(date, 49000)#
    sigma <- c(sigma, 4900)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    taxa <- c(taxa, "blank")#
    date.frame <- data.frame(date, sigma, lat, long, taxa)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.frame <- subset(date.frame, date.frame$Date > xmin)#
    date.frame <- subset(date.frame, date.frame$Date < xmax)#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    names(coord.sub) <- c(".id", "Lat", "Long", "Taxa")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame$Taxa <- coord.sub$Taxa#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    taxa.frame <- samp.frame[, list(Taxa=Taxa, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(taxa.frame$Taxa, lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Taxa", "Lat", "Long", "ageGrid")#
    return(fin.frame)#
}
middle.east.14C <- stack.14C.taxa(middle.east$Date.BP, middle.east$Sigma, xmin=100, xmax= 40000, lat=middle.east$Coord..N, long=middle.east$Coord..E, taxa=middle.east$Subregion)
unique(middle.east.14C$Subregion)
head(middle.east.14C)
middle.east <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/Early Agriculture.csv")
unique(middle.east.14C$Subregion)
unique(middle.east$Subregion)
middle.east.14C <- stack.14C.taxa(middle.east$Date.BP, middle.east$Sigma, xmin=100, xmax= 40000, lat=middle.east$Coord..N, long=middle.east$Coord..E, taxa=as.vector(middle.east$Subregion))
head(middle.east.14C)
early.ag <- taxa.data(middle.east.14C, taxa.names=c("Israel, Palestine", "Jordan", "Egypt_Sinai", "Iran"), xmin=4000, xmax=40000)
head(early.ag)
early.ag.sub.plot <- ggplot(early.ag, aes(Age)) +#
theme_light() +#
geom_area(aes(y=Density, colour=Taxa, fill=Taxa), alpha=0.6, position="dodge") +#
scale_x_reverse("Cal yr BP", limits = c(50000, 5000), breaks = seq(5000, 50000, 5000)) +#
scale_y_continuous("Density", limits = c(0, 0.0015), breaks=seq(0, .0015, .0003), labels=fmt()) +#
scale_colour_discrete(guide = guide_legend(title="")) +#
scale_fill_discrete(guide = guide_legend(title="")) +#
theme(legend.position=c(0, 1.1), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
ggtitle("Middle East")#
early.ag.sub.plot
early.ag.sub.plot <- ggplot(early.ag, aes(Age)) +#
theme_light() +#
geom_area(aes(y=Density, colour=Taxa, fill=Taxa), alpha=0.6, position="dodge") +#
scale_x_reverse("Cal yr BP", limits = c(50000, 5000), breaks = seq(5000, 50000, 5000)) +#
scale_y_continuous("Density", labels=fmt()) +#
scale_colour_discrete(guide = guide_legend(title="")) +#
scale_fill_discrete(guide = guide_legend(title="")) +#
theme(legend.position=c(0, 1.1), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
ggtitle("Middle East")#
early.ag.sub.plot
early.ag.sub.plot <- ggplot(early.ag, aes(Age)) +#
theme_light() +#
geom_area(aes(y=Density, colour=Taxa, fill=Taxa), alpha=0.6, position="dodge")
early.ag.sub.plot
tail(early.ag)
stack.14C.taxa <- function(date, sigma, xmin, xmax, lat, long, taxa){#
    date <- c(date, 49000)#
    sigma <- c(sigma, 4900)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    taxa <- c(taxa, "blank")#
    date.frame <- data.frame(date, sigma, lat, long, taxa)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin) < Date & Date < (xmax))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    names(coord.sub) <- c(".id", "Lat", "Long", "Taxa")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame$Taxa <- coord.sub$Taxa#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    taxa.frame <- samp.frame[, list(Taxa=Taxa, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(taxa.frame$Taxa, lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Taxa", "Lat", "Long", "ageGrid")#
    return(fin.frame)#
}
middle.east <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/Early Agriculture.csv")#
#
middle.east.14C <- stack.14C.taxa(middle.east$Date.BP, middle.east$Sigma, xmin=100, xmax= 40000, lat=middle.east$Coord..N, long=middle.east$Coord..E, taxa=middle.east$Subregion)#
#
early.ag <- taxa.data(middle.east.14C, taxa.names=c("Israel, Palestine", "Jordan", "Egypt_Sinai", "Iran"), xmin=4000, xmax=40000)
head(middle.east.14C)
middle.east.14C <- stack.14C.taxa(middle.east$Date.BP, middle.east$Sigma, xmin=100, xmax= 40000, lat=middle.east$Coord..N, long=middle.east$Coord..E, taxa=as.vector(middle.east$Subregion))#
#
early.ag <- taxa.data(middle.east.14C, taxa.names=c("Israel, Palestine", "Jordan", "Egypt_Sinai", "Iran"), xmin=4000, xmax=40000)
head(early.ag)
tail(early.ag)
early.ag <- taxa.data(middle.east.14C, taxa.names=c("Israel, Palestine", "Jordan", "Egypt_Sinai", "Iran"), xmin=1000, xmax=40000)
head(early.ag)
head(middle.east.14C)
tail(middle.east.14C)
stack.14C.taxa <- function(date, sigma, xmin, xmax, lat, long, taxa){#
    date <- as.numeric(as.vector(c(date, 49000)))#
    sigma <- as.numeric(as.vector(c(sigma, 4900)))#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    taxa <- as.vector(c(taxa, "blank"))#
    date.frame <- data.frame(date, sigma, lat, long, taxa)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin) < Date & Date < (xmax))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    names(coord.sub) <- c(".id", "Lat", "Long", "Taxa")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame$Taxa <- coord.sub$Taxa#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    taxa.frame <- samp.frame[, list(Taxa=Taxa, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(taxa.frame$Taxa, lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Taxa", "Lat", "Long", "ageGrid")#
    return(fin.frame)#
}
middle.east.14C <- stack.14C.taxa(middle.east$Date.BP, middle.east$Sigma, xmin=100, xmax= 40000, lat=middle.east$Coord..N, long=middle.east$Coord..E, taxa=middle.east$Subregion)#
#
early.ag <- taxa.data(middle.east.14C, taxa.names=c("Israel, Palestine", "Jordan", "Egypt_Sinai", "Iran"), xmin=4000, xmax=40000)
head(middle.east.14C)
tail(middle.east.14C)
middle.east.14C <- stack.14C.taxa(as.numeric(as.vector(middle.east$Date.BP)), as.numeric(as.vector(middle.east$Sigma)), xmin=100, xmax= 40000, lat=middle.east$Coord..N, long=middle.east$Coord..E, taxa=as.vector(middle.east$Subregion))
head(middle.east.14C)
early.ag <- taxa.data(middle.east.14C, taxa.names=c("Israel, Palestine", "Jordan", "Egypt_Sinai", "Iran"), xmin=4000, xmax=40000)
head(early.ag)
early.ag.sub.plot <- ggplot(early.ag, aes(Age)) +#
theme_light() +#
geom_area(aes(y=Density, colour=Taxa, fill=Taxa), alpha=0.6, position="dodge") +#
scale_x_reverse("Cal yr BP", limits = c(50000, 5000), breaks = seq(5000, 50000, 5000)) +#
scale_y_continuous("Density", labels=fmt()) +#
scale_colour_discrete(guide = guide_legend(title="")) +#
scale_fill_discrete(guide = guide_legend(title="")) +#
theme(legend.position=c(0, 1.1), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
ggtitle("Middle East")#
early.ag.sub.plot
early.ag.sub.plot <- ggplot(early.ag, aes(Age)) +#
theme_light() +#
geom_area(aes(y=Density, colour=Taxa, fill=Taxa), alpha=0.6, position="dodge") +#
scale_x_reverse("Cal yr BP", limits = c(15000, 2000), breaks = seq(2000, 15000, 2000)) +#
scale_y_continuous("Density", labels=fmt()) +#
scale_colour_discrete(guide = guide_legend(title="")) +#
scale_fill_discrete(guide = guide_legend(title="")) +#
theme(legend.position=c(0, 1.1), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
ggtitle("Middle East")#
early.ag.sub.plot
unique(middle.east.14C$Taxa)
early.ag <- taxa.data(middle.east.14C, taxa.names=c("Israel, Palestine", "Jordan", "Egypt_Sinai", "Iran", "Central Anatolia"), xmin=4000, xmax=40000)#
#
early.ag.sub.plot <- ggplot(early.ag, aes(Age)) +#
theme_light() +#
geom_area(aes(y=Density, colour=Taxa, fill=Taxa), alpha=0.6, position="dodge") +#
scale_x_reverse("Cal yr BP", limits = c(15000, 2000), breaks = seq(2000, 15000, 2000)) +#
scale_y_continuous("Density", labels=fmt()) +#
scale_colour_discrete(guide = guide_legend(title="")) +#
scale_fill_discrete(guide = guide_legend(title="")) +#
theme(legend.position=c(0, 1.1), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
ggtitle("Middle East")#
early.ag.sub.plot
early.ag <- taxa.data(middle.east.14C, taxa.names=c("Southwest Anatolia", "Jordan", "Mediterranean Anatolia", "Eastern Aegean", "Central Anatolia"), xmin=4000, xmax=40000)#
#
early.ag.sub.plot <- ggplot(early.ag, aes(Age)) +#
theme_light() +#
geom_area(aes(y=Density, colour=Taxa, fill=Taxa), alpha=0.6, position="dodge") +#
scale_x_reverse("Cal yr BP", limits = c(15000, 2000), breaks = seq(2000, 15000, 2000)) +#
scale_y_continuous("Density", labels=fmt()) +#
scale_colour_discrete(guide = guide_legend(title="")) +#
scale_fill_discrete(guide = guide_legend(title="")) +#
theme(legend.position=c(0, 1.1), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
ggtitle("Middle East")#
early.ag.sub.plot
early.ag <- taxa.data(middle.east.14C, taxa.names=c("Lower Danube East", "Jordan", "Central Balkans South", "Eastern Aegean", "Central Anatolia"), xmin=4000, xmax=40000)#
#
early.ag.sub.plot <- ggplot(early.ag, aes(Age)) +#
theme_light() +#
geom_area(aes(y=Density, colour=Taxa, fill=Taxa), alpha=0.6, position="dodge") +#
scale_x_reverse("Cal yr BP", limits = c(15000, 2000), breaks = seq(2000, 15000, 2000)) +#
scale_y_continuous("Density", labels=fmt()) +#
scale_colour_discrete(guide = guide_legend(title="")) +#
scale_fill_discrete(guide = guide_legend(title="")) +#
theme(legend.position=c(0, 1.1), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
ggtitle("Middle East")#
early.ag.sub.plot
library(ggplot2)
setwd("/Users/towett/Documents/Caro's MSc dataset/Data Analysis 3")
ele<-read.table("/Users/lee/Dropbox/Caro's MSc dataset/pXRF data maize comparisons by plantpart2 Mean.csv",sep=",",header=T)
k.density <- ggplot(ele) +#
aes(K, fill=Analysis, colour=Analysis) +#
geom_density(alpha=0.5) +#
scale_x_continuous("Potassium (ppm)") +#
scale_y_continuous("Density")#
k.density#
ggsave(k.density, file="/Users/lee/Dropbox/Caro's MSc dataset/Density Plots/K.tiff")
k.density
library(shiny)
runApp("~/Desktop/xrf-app")
runApp("~/Dropbox/Application Code/XRF/SQ Drafts/v13 PCA Download")
packageurl <- "http://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_2.1.0.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
runApp("~/Dropbox/Application Code/XRF/SQ Drafts/v13 PCA Download")
(168-13)/sqrt(13)
#Erase everything that comes before#
rm(list = ls(all = TRUE))#
#
#Compatibility#
if(.Platform$OS.type=="windows") {#
    quartz<-function() windows()#
}#
###Load Packages#
library(TTR)#
library(ggplot2)#
library(gridExtra)#
library(scales)#
library(gtable)#
library(wq)#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape2)#
library(pbapply)#
library(xlsx)#
library(data.table)#
library(dplyr)#
library(akima)#
library(ggmap)#
library(ggthemes)#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#####Collapse Dates#
collapse.the.dates.begin <- function(sites, biogeo, general, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, biogeo, general, dates, sigma)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
#
collapse.the.dates.taxa <- function(sites, biogeo, general, dates, sigma, taxa) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, biogeo, general, dates, sigma)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma", "Taxa")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
####Function to organize plots in a window#
layOut = function(...) {#
    require(grid)#
    x <- list(...)#
    n <- max(sapply(x, function(x) max(x[[2]])))#
    p <- max(sapply(x, function(x) max(x[[3]])))#
    pushViewport(viewport(layout = grid.layout(n, p)))#
    for (i in seq_len(length(x))) {#
        print(x[[i]][[1]], vp = viewport(layout.pos.row = x[[i]][[2]],#
        layout.pos.col = x[[i]][[3]]))#
    }#
}#
#
####Function to maintain significant digits in plot#
fmt <- function(){#
    function(x) format(x,nsmall = 4,scientific = FALSE)#
}#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#
###Multicore apply function with status bar#
mcpblapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    if (!is.vector(X) || is.object(X))#
    X <- as.list(X)#
    B <- length(X)#
    if (!(interactive() && dopb() && B >= 1))#
    return(mclapply(X, FUN, ...#
    ))#
    pb <- startpb(0, B)#
    rval <- vector("list", B)#
    for (i in 1:B) {#
        rval[i] <- list(FUN(X[[i]], ...))#
        setpb(pb, i)#
    }#
    close(pb)#
    names(rval) <- names(X)#
    rval#
}#
#
mcpbsapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    answer <- mcpblapply(X = X, FUN = FUN,  ..., USE.NAMES = TRUE)#
    if (USE.NAMES && is.character(X) && is.null(names(answer)))#
    names(answer) <- X#
    if (!identical(simplify, FALSE) && length(answer))#
    simplify2array(answer, higher = (simplify == "array"))#
    else answer#
}#
#
mcreplicate <- function(n, expr, simplify = "array", mc.cores = getOption("mc.cores", 2L)) {#
    mcpbsapply(integer(n), eval.parent(substitute(function(...) expr)), mc.cores = getOption("mc.cores", 2L),#
    simplify = simplify)#
}#
conf.loess <- function(x, sigma, n, reps, xmin, xmax) {#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.age <- sample(x, size=n, replace=TRUE)#
        samp.dist <- sapply(1:n, function(x) rnorm(500, samp.age, 85))#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (replicate(reps, makeloess(res.t, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
taphonomic.correct <- function(stack.14C.data) {#
    df <- stack.14C.data#
    n.t <- 5.726442*(10^6)*(df$Age + 2176.4)^-1.3925309#
    lambda <- 1.3925309/(2176.4+df$Age)*100#
    lambda.r <- 1-lambda#
    n.t.relative <- n.t/128.8192#
    df$Counts.Corrected <-df$Counts/n.t.relative#
    count.mod.sum <- sum(df$Counts.Corrected)#
    df$Density.Corrected <- df$Counts.Corrected/count.mod.sum#
    return(df)#
}#
#
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
    date <- c(date, 100)#
    sigma <- c(sigma, 50)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
#######
stack.14C <- function(x, sigma, xmin, xmax, taxa){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
stack.14C.taxa <- function(date, sigma, xmin, xmax, lat, long, taxa){#
    date <- as.numeric(as.vector(c(date, 49000)))#
    sigma <- as.numeric(as.vector(c(sigma, 4900)))#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    taxa <- as.vector(c(taxa, "blank"))#
    date.frame <- data.frame(date, sigma, lat, long, taxa)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin) < Date & Date < (xmax))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    names(coord.sub) <- c(".id", "Lat", "Long", "Taxa")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame$Taxa <- coord.sub$Taxa#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    taxa.frame <- samp.frame[, list(Taxa=Taxa, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(taxa.frame$Taxa, lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Taxa", "Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
#
taxa.data <- function(stack.14C.taxa.object, taxa.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==taxa.names)#
    temp.df <- data.frame(temp.df.1$ageGrid, factor(temp.df.1$Taxa))#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    samp.hist <- data.frame(samp.mids.df[1], samp.mids.df[2], samp.counts.df[2], samp.density.df[2])#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
#
taxa.data.single <- function(stack.14C.taxa.object, taxa.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==taxa.names)#
    temp.df <- data.frame(temp.df.1$ageGrid, factor(temp.df.1$Taxa))#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    samp.hist <- data.frame(samp.mids.df[1], samp.counts.df[1], samp.density.df[1])#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
median.stack.14C <- function(x, sigma, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    n <- length(medians.all)#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
######Function to Generate Confidence Bands around SCDRD#
conf.cal.loess <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd, samp.ages$.id)#
    colnames(samp.frame) <- c("Mean", "Sd", "Id")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma*2#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma*2#
    id.frame <- samp.frame[, list(Id=Id, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    colnames(id.frame) <- c("Id", "ageGrid")#
    res.by <- by(samp.frame$ageGrid, samp.frame$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.frame$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
#
###Traditional SCDPD#
BchronDensityCollapse <- function (dates, sigma, sites,  dfs = rep(100, length(dates)), numMix = 30,#
iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE, collapse.dates=FALSE)#
{#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    pathToCalCurves = system.file("data",#
    package = "Bchron")#
    calCurves <- rep("intcal13", length(date.data$Date))#
    ages <- date.data$Date#
    ageSds <- date.data$Sigma#
    if (length(ages) != length(ageSds))#
    stop("ages and 1-sigma errors must be same length")#
    if (length(ages) != length(calCurves))#
    stop("ages and Calibration curves must be same length")#
    x = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, eps = 0, dfs = rep(100,#
    length(ages)))#
    xSmall = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, dfs = rep(100, length(ages)))#
    n = length(x)#
    thetaRange = range(xSmall[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, xSmall[[i]]$ageGrid))#
    offset = vector(length = n)#
    for (i in 1:n) {#
        offset[i] = ifelse(x[[i]]$calCurve == "normal", 61, 0)#
    }#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    clrInv = function(phi) {#
        return(exp(phi)/sum(exp(phi)))#
    }#
    J = numMix#
    mu = seq(thetaRange[1], thetaRange[2], length = numMix)#
    theta = vector(length = n)#
    for (j in 1:n) theta[j] = round(stats::rnorm(1, mean = x[[j]]$ageGrid[match(max(x[[j]]$densities),#
    x[[j]]$densities)], sd = ageSds[j]), 3)#
    phi = c(stats::runif(J - 1, -10, 10), 0)#
    p = as.numeric(clrInv(phi))#
    G = gbase(theta, mu)#
    remaining = (iterations - burn)/thin#
    thetaStore = matrix(ncol = length(theta), nrow = remaining)#
    pStore = matrix(ncol = J, nrow = remaining)#
    thetaAll = matrix(NA, ncol = n, nrow = iterations)#
    for (j in 1:n) thetaAll[, j] = sample(xSmall[[j]]$ageGrid,#
    size = iterations, prob = xSmall[[j]]$densities, replace = TRUE)#
    mu2 = mu#
    sigma2 = (mu[2] - mu[1])/2#
    my_dnorm = function(x) stats::dnorm(x, mean = mu2, sd = sigma2)#
    pb = utils::txtProgressBar(min = 1, max = iterations, style = 3,#
    width = 60, title = "Running BchronDensity")#
    for (i in 1:iterations) {#
        utils::setTxtProgressBar(pb, i)#
        if (i > burn & i%%thin == 0) {#
            ind = (i - burn)/thin#
            thetaStore[ind, ] = theta#
            pStore[ind, ] = p#
        }#
        if (updateAges) {#
            for (j in 1:n) {#
                thetaNew = round(stats::rnorm(1, theta[j], 0.5),#
                3)#
                thetaNewMatch = as.integer(thetaNew + offset[j]) +#
                1#
                thetaNewLogDens = max(log(x[[j]]$densities[thetaNewMatch]),#
                -1e+06)#
                priorNew.dens = sum(p * stats::dnorm(thetaNew,#
                mean = mu2, sd = sigma2))#
                thetaMatch = as.integer(theta[j] + offset[j]) +#
                1#
                thetaLogDens = max(log(x[[j]]$densities[thetaMatch]),#
                -1e+06)#
                priorDens = sum(p * stats::dnorm(theta[j], mean = mu2,#
                sd = sigma2))#
                logRtheta = thetaNewLogDens - thetaLogDens +#
                log(priorNew.dens) - log(priorDens)#
                if (stats::runif(1) < exp(logRtheta))#
                theta[j] = thetaNew#
            }#
        }#
        else {#
            theta = thetaAll[i, ]#
        }#
        for (j in 1:(J - 1)) {#
            phiNew = stats::rnorm(1, phi[j], 1)#
            phiAllNew = phi#
            phiAllNew[j] = phiNew#
            pNew = as.numeric(clrInv(phiAllNew))#
            phiNewLogDens = sum(log(G %*% pNew))#
            phiLogDens = sum(log(G %*% p))#
            logRphi = phiNewLogDens - phiLogDens + stats::dunif(phiNew,#
            -10, 10, log = TRUE) - stats::dunif(phi[j], -10,#
            10, log = TRUE)#
            if (stats::runif(1) < exp(logRphi)) {#
                phi[j] = phiNew#
                p = as.numeric(clrInv(phi))#
            }#
        }#
    }#
    output = list(theta = thetaStore, p = pStore, mu = mu, calAges = xSmall,#
    G = G)#
    class(output) = "BchronDensityRun"#
    return(output)#
}#
#
###Function to modify existing SCDPD from BchronDensity (modified from Bchron)#
SlugDens.t <- function (x, xmin, xmax)#
{#
    n = length(x$calAges)#
    thetaRange = range(x$calAges[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, x$calAges[[i]]$ageGrid))#
    dateGrid = seq(xmin, xmax, length = 1000)#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    Gstar = gbase(dateGrid, x$mu)#
    dens = vector(length = length(dateGrid))#
    for (i in 1:nrow(x$p)) {#
        dens = dens + Gstar %*% x$p[i, ]#
    }#
    densFinal = dens/sum(dens)#
    slugbase <- data.frame(dateGrid,densFinal)#
    colnames(slugbase) <- c("Age", "Density")#
    slugbase <- arrange(slugbase, desc(Age))#
    return(slugbase)#
}#
#
SlugSig <- function(x, sigma, n, reps, xmin, xmax) {#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronDensity(x, sigma, samp.intcal, numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
    samp.hist <- SlugDens.t(samp.slugdens, xmin, xmax)#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronDensity(samp.14C, samp.sig, rep("intcal13", n), numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
        samp.dist <- SlugDens.t(samp.dist.n, xmin, xmax)#
        samp.loess <- lowess(samp.dist$Age, samp.dist$Density, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(samp.hist$Age, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(samp.hist$Age, samp.hist$Density, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="samp.hist.Age"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
####Function to maintain significant digits in plot#
fmt <- function(){#
    function(x) format(x,nsmall = 4,scientific = FALSE)#
}#
collapse.the.dates.begin <- function(sites, region, taxa, dates, sigma, lat, long, datemin, datemax) {#
    n.t <- rep(100, length(sites))#
    df.1 <- data.frame(sites, region, dates, sigma, lat, long)#
    colnames(df.1) <- c("Site", "Region", "X14C.year", "Sigma", "Lat", "Long")#
    df <- subset(df.1, df.1$X14C.year < datemax & df.1$X14C.year > datemin)#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Region))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),3]-df[2:nrow(df), 3]))/((sqrt(df[2:nrow(df), 4]^2 + df[1:(nrow(df)-1),4]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),7], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(df$Site))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
collapse.the.dates.taxa <- function(sites, region, taxa, dates, sigma, lat, long, datemin, datemax) {#
    n.t <- rep(100, length(sites))#
    df.1 <- data.frame(sites, region, dates, sigma, lat, long, taxa)#
    colnames(df.1) <- c("Site", "Region", "X14C.year", "Sigma", "Lat", "Long", "Taxa")#
    df <- subset(df.1, df.1$X14C.year < datemax & df.1$X14C.year > datemin)#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Region))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),3]-df[2:nrow(df), 3]))/((sqrt(df[2:nrow(df), 4]^2 + df[1:(nrow(df)-1),4]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),8], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(df$Site))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
#
site.median <- function(sites, region, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, region, dates, sigma)#
    colnames(df) <- c("Site", "Region", "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Region))#
    df <- arrange(df, desc(Site))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(df[nrow(df)] > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
site.time <- function(sites, dates, sigma, xmin, xmax, time) {#
    df <- data.frame(sites, dates, sigma)#
    colnames(df) <- c("Site",  "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    site.frame <- aggregate(x=df$X14C.year, by=list(df$Site), FUN=mean)#
    site.vector <- site.frame$x#
    site.frame.sig <- aggregate(x=df$Sigma, by=list(df$Site), FUN=mean)#
    site.vector.sig <- site.frame.sig$x#
    samp.intcal <- rep("intcal13", length(site.vector))#
    samp.slugdens <- BchronCalibrate(site.vector, site.vector.sig, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    median.simple <- round((medians/100000), digits=2)*100000#
    median.table <- table(median.simple)#
    median.values <- as.numeric(paste(median.table))#
    median.frame <- data.frame(t(median.values))#
    colnames(median.frame) <- names(median.table)#
    median.t <- data.frame(t(median.frame))#
    median.df <- data.frame(add_rownames(median.t, "VALUE"))#
    colnames(median.df) <- c("Millenium", "Site")#
    median.df <- median.df[with(median.df, order(as.numeric(Millenium))), ]#
    null <- rep(0, length(time))#
    null.frame <- t(data.frame(null))#
    colnames(null.frame) <- time#
    null.t <- data.frame(t(null.frame))#
    null.df <- data.frame(add_rownames(null.t, "VALUE"))#
    colnames(null.df) <- c("Millenium", "Site")#
    all.frame <- merge(null.df, median.df, all=TRUE, by="Millenium")#
    all.frame[is.na(all.frame)] <- 0#
    all.frame <- all.frame[with(all.frame, order(as.numeric(Millenium))), ]#
    the.result <- data.frame(all.frame$Millenium, all.frame$Site.y)#
    colnames(the.result) <- c("Millenium", "Sites")#
    scaled <- as.vector(apply(data.frame(the.result$Sites), 2, function(x) scale(x)))#
    scaled.mean <- mean(scaled)#
    scaled.sd <- sd(scaled)#
    the.result$z.score <- (scaled-scaled.mean)/scaled.sd#
    the.result$p.value <- pnorm(the.result$z.score, lower.tail=FALSE)#
    return(format(the.result, digits=2))#
}#
median.stack.14C <- function(dates, sigma, sites, xmin, xmax, time){#
    samp.intcal <- rep("intcal13", length(dates))#
    samp.slugdens <- BchronCalibrate(dates, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    median.simple <- round((medians/100000), digits=2)*100000#
    median.table <- table(median.simple)#
    median.values <- as.numeric(paste(median.table))#
    median.frame <- data.frame(t(median.values))#
    colnames(median.frame) <- names(median.table)#
    median.t <- data.frame(t(median.frame))#
    median.df <- data.frame(add_rownames(median.t, "VALUE"))#
    colnames(median.df) <- c("Millenium", "Site")#
    median.df <- median.df[with(median.df, order(as.numeric(Millenium))), ]#
    null <- rep(0, length(time))#
    null.frame <- t(data.frame(null))#
    colnames(null.frame) <- time#
    null.t <- data.frame(t(null.frame))#
    null.df <- data.frame(add_rownames(null.t, "VALUE"))#
    colnames(null.df) <- c("Millenium", "Site")#
    all.frame <- merge(null.df, median.df, all=TRUE, by="Millenium")#
    all.frame[is.na(all.frame)] <- 0#
    all.frame <- all.frame[with(all.frame, order(as.numeric(Millenium))), ]#
    the.result <- data.frame(all.frame$Millenium, all.frame$Site.y)#
    colnames(the.result) <- c("Millenium", "Sites")#
    scaled <- as.vector(apply(data.frame(the.result$Sites), 2, function(x) scale(x)))#
    scaled.mean <- mean(scaled)#
    scaled.sd <- sd(scaled)#
    the.result$z.score <- (scaled-scaled.mean)/scaled.sd#
    the.result$p.value <- pnorm(the.result$z.score, lower.tail=FALSE)#
    return(format(the.result, digits=2))#
}#
site.time.half <- function(sites, dates, sigma, xmin, xmax, time) {#
    df <- data.frame(sites, dates, sigma)#
    colnames(df) <- c("Site",  "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    site.frame <- aggregate(x=df$X14C.year, by=list(df$Site), FUN=mean)#
    site.vector <- site.frame$x#
    site.frame.sig <- aggregate(x=df$Sigma, by=list(df$Site), FUN=mean)#
    site.vector.sig <- site.frame.sig$x#
    samp.intcal <- rep("intcal13", length(site.vector))#
    samp.slugdens <- BchronCalibrate(site.vector, site.vector.sig, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
median.stack.14C.half <- function(x, sigma, sites, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}
human.data<- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/CARD.csv")
human.data <- subset(human.data, human.data$Latitude < 62)#
human.data <- subset(human.data, human.data$Latitude > 43)#
human.data <- subset(human.data, human.data$Longitude < 22)#
human.data <- subset(human.data, human.data$Longitude > -1.196)
northern.europe <- collapse.the.dates.begin(sites=mid.east$Site.name, region=mid.east$Context, dates=mid.east$Normalized.age, sigma=mid.east$NA.Sigma, lat=mid.east$Latitude, long=mid.east$Longitude, datemin = 100, datemax = 45000)
ls(human.data)
northern.europe <- collapse.the.dates.begin(sites=human.data$Site.name, region=human.data$Context, dates=human.data$Normalized.age, sigma=human.data$NA.Sigma, lat=human.data$Latitude, long=human.data$Longitude, datemin = 100, datemax = 45000)
ls(northern.europe)
length(northern.europe$Site)
north.europe.14C <- stack.14C(northern.europe$X14C.year, northern.europe$Sigma, xmin=0, xmax= 40000)
north.euro.plot <- ggplot(north.europe.14C) +#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 750)) +#
theme_light()#
north.euro.plot
north.euro.plot <- ggplot(north.europe.14C) +#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD") +#
theme_light()#
north.euro.plot
head(human.data)
human.data<- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/CARD.csv")
head(human.data)
unique(human.data$Country)
###British isles#
human.data <- subset(human.data, human.data$Latitude < 59)#
human.data <- subset(human.data, human.data$Latitude > 50)#
human.data <- subset(human.data, human.data$Longitude < 11)#
human.data <- subset(human.data, human.data$Longitude > -2)
northern.europe <- collapse.the.dates.begin(sites=human.data$Site.name, region=human.data$Context, dates=human.data$Normalized.age, sigma=human.data$NA.Sigma, lat=human.data$Latitude, long=human.data$Longitude, datemin = 100, datemax = 45000)
length(northern.europe$Site)
north.europe.14C <- stack.14C(northern.europe$X14C.year, northern.europe$Sigma, xmin=0, xmax= 40000)
north.euro.plot <- ggplot(north.europe.14C) +#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 750)) +#
theme_light()#
north.euro.plot
north.euro.plot
uk.data <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/UK.csv")
ls(uk.data)
head(uk.data)
uk.data <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/UK.csv")
ls(uk.data)
head(uk.ata)
head(uk.data)
ukdata <- collapse.the.dates.begin(sites=uk.data$C14_ID, region=uk.data$Type, dates=uk.data$Date_BP, sigma=uk.data$Sigma, lat=uk.data$OS_East, long=uk.data$OS_North, datemin = 100, datemax = 45000)
head(uk.data$Date_BP)
ukdata <- collapse.the.dates.begin(sites=uk.data$C14_ID, region=uk.data$Type, dates=as.numeric(as.vector(uk.data$Date_BP)), sigma=as.numeric(as.vector(uk.data$Sigma)), lat=uk.data$OS_East, long=uk.data$OS_North, datemin = 100, datemax = 45000)
head(ukdata)
uk.stack <- stack.14C(ukdata$X14C.year, ukdata$Sigma, xmin=0, xmax= 40000)
uk.plot <- ggplot(uk.stack) +#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD", limits = c(-7000, 0)) +#
theme_light()#
uk.plot
uk.plot <- ggplot(uk.stack) +#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 750)) +#
theme_light()#
uk.plot
uk.plot <- ggplot(uk.stack) +#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD", limits = c(-200, 750)) +#
scale_y_continuous("Density", limits = c(0.001, 0.002)) +#
theme_light()#
uk.plot
uk.plot <- ggplot(uk.stack) +#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD", limits = c(-700, 1500)) +#
scale_y_continuous("Density", limits = c(0.001, 0.002)) +#
theme_light()#
uk.plot
uk.plot <- ggplot(uk.stack) +#
geom_text(aes(x=40, y=1.8, label="Pax Romana"))+#
geom_text(aes(x=270, y=2.3, label="Imperial Crisis"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=-106, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=175, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=376, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(Year, NAO), lwd=1.1)+#
geom_line(aes(Year, NAO), colour="light blue", lwd=0.5) +#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD", limits = c(-700, 1500)) +#
scale_y_continuous("Density", limits = c(0.001, 0.002)) +#
theme_light()#
uk.plot
uk.plot <- ggplot(uk.stack) +#
geom_text(aes(x=40, y=1.8, label="Pax Romana"))+#
geom_text(aes(x=270, y=2.3, label="Imperial Crisis"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=-106, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=175, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=376, y=-1.4, label="Visigothic War"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey80", alpha=0.3)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_line(aes(1950-Age, Density)) +#
scale_x_continuous("Year BC/AD", limits = c(-700, 1500)) +#
scale_y_continuous("Density", limits = c(0.001, 0.002)) +#
theme_light()#
uk.plot
library(shiny)
runApp("~/Desktop/xrf-calibrate")

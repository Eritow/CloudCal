x <- c(1, 2)
y <- c(3, 4)
xy.frame <- data.frame(x, y)
head(xy.frame)
xy.frame[,1]
library(shiny)
runApp("~/GitHub/Cezanne")
x
y
z <- "b"
xy.frame <- data.frame(x, y, z)
xy.frame
runApp("~/GitHub/Cezanne")
x
rep(x, each=5)
data <- read.csv(file="~/GitHub/Cezanne/data/blackdiamondmelt.csv")
head(data)
Ne.Ka.frame <- subset(data, !(data$Energy < Ne.K[2]-0.02 | data$Energy > Ne.K[1]+0.02))
head(Ne.Ka.frame)
Ne.Ka.ag <- aggregate(list(Ne.Ka.frame$Counts), by=list(Ne.Ka.frame$Spectrum), FUN="sum")
Ne.Ka.ag <- aggregate(list(Ne.Ka.frame$CPS), by=list(Ne.Ka.frame$Spectrum), FUN="sum")
Ne.Ka.ag
library(shiny)
runApp("~/GitHub/CloudCal")
?ldply
runApp("~/GitHub/CloudCal")
?do.call
runApp("~/GitHub/CloudCal")
rbind.match.columns <- function(input1, input2) {#
    n.input1 <- ncol(input1)#
    n.input2 <- ncol(input2)#
    if (n.input2 < n.input1) {#
        TF.names <- which(names(input2) %in% names(input1))#
        column.names <- names(input2[, TF.names])#
    } else {#
        TF.names <- which(names(input1) %in% names(input2))#
        column.names <- names(input1[, TF.names])#
    }#
    return(rbind(input1[, column.names], input2[, column.names]))#
}
runApp("~/GitHub/CloudCal")
?rbindlist
runApp("~/GitHub/CloudCal")
?ddply
runApp("~/GitHub/CloudCal")
as.integer(5)
as.numeric(5)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
intensity <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26)
concentration <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26)
predict.frame <- data.frame(concentration, intensity)#
          colnames(predict.frame) <- c("Concentration", "Intensity")#
          predict.intensity <- data.frame(predict.frame$Intensity)#
          colnames(predict.intensity) <- c("Intensity")
cal.lm <- lm(predict.frame$Concentration~predict.frame$Intensity)
cal.lm
runApp("~/GitHub/CloudCal")
deployApp("~/GitHub/CloudCal", appName="xrf-calibrate")
library(rsconnect)
deployApp("~/GitHub/CloudCal", appName="xrf-calibrate")
deployApp("~/GitHub/CloudCal", appName="cloudCal")
runApp("~/GitHub/CloudCal")
deployApp("~/GitHub/CloudCal", appName="cloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
deployApp("~/GitHub/CloudCal", appName="cloudCal")
library(rsconnect)
deployApp("~/GitHub/CloudCal", appName="cloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(rsconnect)
deployApp("~/GitHub/CloudCal", appName="cloudCal")
install.packages("shinyIncubator")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCore")
x <- c(1, 2, 3)
y <- c(4, 5, 6)
z <- c(7, 8, 9)
xy.frame <- data.frame(x, y)
xz.frame <- data.frame(x, z)
xy.frame + xz.frame
xy.frame[match(xy.frame$x, xz.frame$x), ] <- xz.frame
xy.frame
test <- xy.frame[match(xy.frame$x, xz.frame$x), ] <- xz.frame
test
pd.concat(xy.frame[:,:3], xy.frame, axis=1)
pd.concat(xy.frame, xy.frame, axis=1)
xy.frame <- xz.frame
xy.frame
xy.frame <- data.frame(x, y)
xy.frame.ioc <- xz.frame
xy.frame.ioc
xy.frame.ioc = xz.frame
xy.frame.ioc
xy.frame.ioc[:, 2] = xz.frame
xy.frame <- data.frame(c(0, 0, 0), y)
colnames(xy.frame) <- c("x", "y")
xy.frame
xz.frame
xy.frame["x"] <- xz.frame["x"]
xy.frame
apply("x", 2, function(x) xy.frame["x"] <- xz.frame["x"])
apply("x", 1, function(x) xy.frame["x"] <- xz.frame["x"])
runApp("~/GitHub/CloudCal")
xy.frame
xy.frame[!"x"]
xy.frame[!("x")]
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCore")
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
lsframe <- data.frame("data", 7000)
lsframe
colnames(lsframe) <- c("Value", "Number")
lsframe
lsframe$Number <- 1
lsframe
colnames(lsframe) <- c("Value", "Number")
runApp("~/GitHub/CloudCal")
madeup.frame$thing <- rep(1, 10)
runApp("~/GitHub/CloudCal")
xy.frame
x <- c(1, 2, 3)
y<- c(4, 5, 6)
xy.frame <- data.frame(x, y)
sum(xy.rame)
sum(xy.frame)
apply(xy.frame, 1, sum)
apply(xy.frame, 2, sum)
?rosums
?rowsums
?rowsum
rowsum(xy.frame)
xy.frame$z <- c(6, 7, 8)
xy.frame
rowsum(xy.frame, group="x")
x
rowSums(xy.frame)
sumr.frame <- data.frame(c("b", "c", "d"), xy.frame)
rowSums(xy.frame)
rowSums(sumr.frame)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
x <- c(1, 2,  )
x <- c(1, 2,  "")
x
y <- c(3, 4, 5)
xy.frame <- data.frame(x, y)
xy.frame
xy.frame[rowSums(is.na(xy.frame)) != ncol(xy.frame),]
xy.frame[rowSums(is.na(xy.frame)) == 0,]
xy.frame[complete.cases(xy.frame),]
xy.frame[!(is.na(xy.frame) | xy.frame ==""), ]
xy.frame[xy.frame==""] <- NA
xy.rame
xy.frame
foo <- na.omit(xy.frame)
foo
runApp("~/GitHub/CloudCal")
xy.test <- xy.frame[xy.frame==""] <- NA
xy.test
xy.frame
runApp("~/GitHub/CloudCal")
xy.frame
runApp("~/GitHub/CloudCal")
x
y
xy.frame <- data.frame(x, y)
xy.frame
xy.frame[xy.frame==""] <- NA
xy.frame
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("source('~/GitHub/CloudCal/server.R', chdir = TRUE)")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/Cezanne")
x <- "Ca"
y <- "K.alpha"
paste(x, ".", y, sep="")
runApp("~/GitHub/Cezanne")
runApp("~/GitHub/CloudCal")
intall.github("AnalytixWare/ShinySky")
library(devtools)
intall.github("AnalytixWare/ShinySky")
install_github("AnalytixWare/ShinySky")
runApp("~/GitHub/CloudCal")
library(rsconnect)
deployApp("~/GitHub/CloudCal", "xrf-calibrate")
deployApp("~/GitHub/CloudCal", "CloudCal")
deployApp("~/GitHub/CloudCal", appName="CloudCal")
deployApp("~/GitHub/CloudCal", "CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCore")
library(shiny)
runApp("~/GitHub/CloudCore")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
?fileInput
runApp("~/GitHub/CloudCal")
library(Cairo)
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCore")
library(shiny)
runApp("~/GitHub/CloudCore")
x <- c(1, 2, 3)
y <- 4, 5, 6
y <- c(4, 5, 6)
names <-c("bob", "nancy", "drew")
data.frame(names, x, y)
xy.frame <- data.frame(names, x, y)
xy.frmae[c("names 'x', "y"")]
xy.frmae[c("names",'x', "y"")]
)
"
xy.frmae[c("names","x", "y")]
xy.frame[c("names","x", "y")]
library(shiny)
?splitLayout
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
?isNull
?is.null
runApp("~/GitHub/CloudCal")
x <- 1
is.null(x)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
load("~/Desktop/testRowExclude.quant")
Calibration$calList[["Ca.K.alpha"]][[1]][[4]]
Calibration$calList[[input$calcurveelement]][[1]]$CalTable$CalType
Calibration$calList[["Ca.K.alpha"]][[1]]$CalTable$CalType
library(shiny)
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")

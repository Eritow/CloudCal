year.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="year"))#
trees <- names(year.list)#
year <- as.vector(unlist(year.list))#
result.frame <- data.frame(trees, year)#
colnames(result.frame) <- c("Tree", "Year")#
#
t.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="howmanyt"))#
trees <- names(t.list)#
how.many.t <- as.vector(unlist(t.list))#
result.frame$HowManyTValues <- how.many.t#
#
p.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="howmanyp"))#
trees <- names(p.list)#
how.many.p <- as.vector(unlist(p.list))#
result.frame$HowManypValues <- how.many.p#
#
years.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="whichyears"))#
trees <- names(years.list)#
which.years <- as.vector(unlist(years.list))#
result.frame$WhichYears <- which.years#
write.table(result.frame, "treeresultssmall.csv", sep=",")
head(chaco.trees)
ls(chacotrees)
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "year", "howmanyt", "howmanyp", "whichyears", "summaryframe")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.sequence <- tree.sequence[,1][!is.na(tree.sequence[,1])]#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t.value", "Z score", "p.value")#
    result.min <- which.min(results.frame[,5])#
    result.year <- results.frame$Year[result.min]#
    result.year <- as.data.frame(result.year)#
    #colnames(result.year) <- colnames(tree.sequence)#
    t.results <- subset(results.frame, t.value>=3.5)#
    how.many.t <- length(t.results[,1])#
    p.results <- subset(results.frame, p.value<=0.05)#
    how.many.p <- length(p.results[,1])#
    which.years <- p.results$Year#
    if(return=="fullframe"){#
        results.frame#
    }else if(return=="year"){#
        result.year#
    } else if(return=="howmanyt"){#
        how.many.t#
    }else if(return=="howmanyp"){#
        how.many.p#
    }else if(return=="whichyears"){#
        which.years#
    }else if(return=="summaryframe"){#
        summary.frame#
    }#
}#
#
year.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="year"))#
trees <- names(year.list)#
year <- as.vector(unlist(year.list))#
result.frame <- data.frame(trees, year)#
colnames(result.frame) <- c("Tree", "Year")#
#
t.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="howmanyt"))#
trees <- names(t.list)#
how.many.t <- as.vector(unlist(t.list))#
result.frame$HowManyTValues <- how.many.t#
#
p.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="howmanyp"))#
trees <- names(p.list)#
how.many.p <- as.vector(unlist(p.list))#
result.frame$HowManypValues <- how.many.p#
#
years.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="whichyears"))#
trees <- names(years.list)#
which.years <- as.vector(unlist(years.list))#
result.frame$WhichYears <- which.years#
write.table(result.frame, "treeresultssmall.csv", sep=",")
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "yearp", "yeart", "howmanyt", "howmanyp", "whichyears", "summaryframe")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.sequence <- tree.sequence[,1][!is.na(tree.sequence[,1])]#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t.value", "Z score", "p.value")#
    result.min <- which.min(results.frame[,5])#
    result.max <- which.max(results.frame[,3])#
    result.year.p <- results.frame$Year[result.min]#
    result.year.t <- results.frame$Year[result.max]#
    result.year.p <- as.data.frame(result.year.p)#
    result.year.t <- as.data.frame(result.year.t)#
#
    #colnames(result.year) <- colnames(tree.sequence)#
    t.results <- subset(results.frame, t.value>=3.5)#
    how.many.t <- length(t.results[,1])#
    p.results <- subset(results.frame, p.value<=0.05)#
    how.many.p <- length(p.results[,1])#
    which.years <- p.results$Year#
    if(return=="fullframe"){#
        results.frame#
    }else if(return=="yearp"){#
        result.year.p#
        results.frame#
    }else if(return=="yeart"){#
        result.year.t#
    } else if(return=="howmanyt"){#
        how.many.t#
    }else if(return=="howmanyp"){#
        how.many.p#
    }else if(return=="whichyears"){#
        which.years#
    }else if(return=="whichts"){#
        which.t.values#
    }else if (return=="whichps"){#
        which.p.values#
    }#
}#
#
year.p.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="yearp"))#
trees <- names(year.p.list)#
year.p <- as.vector(unlist(year.p.list))#
result.frame <- data.frame(trees, year.p)#
colnames(result.frame) <- c("Tree", "Yearp")#
#
year.t.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="yeart"))#
trees <- names(year.t.list)#
year.t <- as.vector(unlist(year.t.list))#
result.frame$YearT <- year.t#
t.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="howmanyt"))#
trees <- names(t.list)#
how.many.t <- as.vector(unlist(t.list))#
result.frame$HowManyTValues <- how.many.t#
#
p.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="howmanyp"))#
trees <- names(p.list)#
how.many.p <- as.vector(unlist(p.list))#
result.frame$HowManypValues <- how.many.p#
#
#years.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="whichyears"))#
#trees <- names(years.list)#
#which.years <- as.vector(unlist(years.list))#
#result.frame$WhichYears <- which.years#
write.table(result.frame, "treeresultssmall.csv", sep=",")
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults", sheetName="Summary")
library(xlsx)
curl -#ROL https://www.rforge.net/rJava/snapshot/rJava_0.9-8.tar.gz#
R CMD INSTALL rJava_0.9-8.tar.gz
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/server/libjvm.dylib')#
require(rJava)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
sudo ln -f -s $(/usr/libexec/java_home)/jre/lib/server/libjvm.dylib /usr/local/lib
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
dyn.load(paste0(system2('/usr/libexec/java_home', stdout = TRUE), '/jre/lib/server/libjvm.dylib'))
library(xlsx)
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults", sheetName="Summary")
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
results.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="fullframe"))
head(result.frame)
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "yearp", "yeart", "howmanyt", "howmanyp", "whichyears", "summaryframe")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.sequence <- tree.sequence[,1][!is.na(tree.sequence[,1])]#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t.value", "Z score", "p.value")#
    result.min <- which.min(results.frame[,5])#
    result.max <- which.max(results.frame[,3])#
    result.year.p <- results.frame$Year[result.min]#
    result.year.t <- results.frame$Year[result.max]#
    result.year.p <- as.data.frame(result.year.p)#
    result.year.t <- as.data.frame(result.year.t)#
#
    #colnames(result.year) <- colnames(tree.sequence)#
    t.results <- subset(results.frame, t.value>=3.5)#
    how.many.t <- length(t.results[,1])#
    p.results <- subset(results.frame, p.value>=0.05)#
    how.many.p <- length(p.results[,1])#
    which.years <- p.results$Year#
    if(return=="fullframe"){#
        results.frame#
    }else if(return=="yearp"){#
        result.year.p#
        results.frame#
    }else if(return=="yeart"){#
        result.year.t#
    } else if(return=="howmanyt"){#
        how.many.t#
    }else if(return=="howmanyp"){#
        how.many.p#
    }else if(return=="whichyears"){#
        which.years#
    }else if(return=="whichts"){#
        which.t.values#
    }else if (return=="whichps"){#
        which.p.values#
    }#
}
example <-yearJackKnife(chacotrees$CK.10, source.sequence, return="fullframe")
head(example)
result.mins <- which.min(example[,5])
result.year.ps <- example$Year[result.mins]
result.year.ps
year.p.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="yearp"))#
trees <- names(year.p.list)#
year.p <- as.vector(unlist(year.p.list))#
result.frame <- data.frame(trees, year.p)#
colnames(result.frame) <- c("Tree", "Yearp")
result.frame$YearT <- year.t
result.frame$HowManyTValues <- how.many.t
result.frame$HowManypValues <- how.many.p
write.table(result.frame, "treeresultssmall.csv", sep=",")
head(result.frame)
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "yearp", "yeart", "howmanyt", "howmanyp", "whichyears", "summaryframe")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.sequence <- tree.sequence[,1][!is.na(tree.sequence[,1])]#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t.value", "Z score", "p.value")#
    result.min <- which.min(results.frame[,5])#
    result.max <- which.max(results.frame[,3])#
    result.year.p <- results.frame$Year[result.min]#
    result.year.t <- results.frame$Year[result.max]#
    result.year.p <- as.data.frame(result.year.p)#
    result.year.t <- as.data.frame(result.year.t)#
#
    #colnames(result.year) <- colnames(tree.sequence)#
    t.results <- subset(results.frame, t.value>=3.5)#
    how.many.t <- length(t.results[,1])#
    p.results <- subset(results.frame, p.value<=0.05)#
    how.many.p <- length(p.results[,1])#
    which.years <- p.results$Year#
    if(return=="fullframe"){#
        results.frame#
    }else if(return=="yearp"){#
        result.year.p#
        results.frame#
    }else if(return=="yeart"){#
        result.year.t#
    } else if(return=="howmanyt"){#
        how.many.t#
    }else if(return=="howmanyp"){#
        how.many.p#
    }else if(return=="whichyears"){#
        which.years#
    }else if(return=="whichts"){#
        which.t.values#
    }else if (return=="whichps"){#
        which.p.values#
    }#
}
head(results.list[[1]])
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "yearp", "yeart", "howmanyt", "howmanyp", "whichyears", "summaryframe")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.sequence <- tree.sequence[,1][!is.na(tree.sequence[,1])]#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t.value", "Z score", "p.value")#
    result.min <- which.min(results.frame[,5])#
    result.max <- which.max(results.frame[,3])#
    result.year.p <- results.frame$Year[result.min]#
    result.year.t <- results.frame$Year[result.max]#
    result.year.p <- as.data.frame(result.year.p)#
    result.year.t <- as.data.frame(result.year.t)#
#
    #colnames(result.year) <- colnames(tree.sequence)#
    t.results <- subset(results.frame, t.value>=3.5)#
    how.many.t <- length(t.results[,1])#
    p.results <- subset(results.frame, p.value<=0.05)#
    how.many.p <- length(p.results[,1])#
    which.years <- p.results$Year#
    if(return=="fullframe"){#
        results.frame#
    }else if(return=="yearp"){#
        result.year.p#
    }else if(return=="yeart"){#
        result.year.t#
    } else if(return=="howmanyt"){#
        how.many.t#
    }else if(return=="howmanyp"){#
        how.many.p#
    }else if(return=="whichyears"){#
        which.years#
    }else if(return=="whichts"){#
        which.t.values#
    }else if (return=="whichps"){#
        which.p.values#
    }#
}
year.p.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="yearp"))#
trees <- names(year.p.list)#
year.p <- as.vector(unlist(year.p.list))#
result.frame <- data.frame(trees, year.p)#
colnames(result.frame) <- c("Tree", "Yearp")
result.frame$YearT <- year.t
result.frame$HowManyTValues <- how.many.t
result.frame$HowManypValues <- how.many.p
head(result.frame)
write.table(result.frame, "treeresultssmall.csv", sep=",")
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")#
#
pblapply(result.list, function(x) write.xlsx(x, file=file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=names(x), append=TRUE))
pblapply(result.list, function(x) write.xlsx(x, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=names(x), append=TRUE))
pblapply(results.list, function(x) write.xlsx(x, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=names(x), append=TRUE))
pblapply(results.list, function(x) write.xlsx(x, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="test", append=TRUE))
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
pblapply(results.list, function(x) write.xlsx(x, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", append=TRUE))
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
?write.xlsx
pblapply(results.list, function(x) write.xlsx(x, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=paste(names(x)), append=TRUE))
pblapply(results.list, function(x) write.xlsx(x, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=as.character(names(x)), append=TRUE))
pblapply(results.list, function(x) write.xlsx(x, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=paste0("Tree", names(x)), append=TRUE))
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
pblapply(results.list, function(x) write.xlsx(x, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=paste0("Tree", names(x)), append=TRUE))
paste0("Tree", names(results.list[[1]]))
paste0("Tree", names(results.list[1]]))
paste0("Tree", names(results.list[1]))
results.list.names <- names(results.list)
head(results.list.names)
results.list.names["CK.10"]
pblapply(results.list.names, function(x) write.xlsx(results.list[[x]], file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=x, append=TRUE))
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
pblapply(results.list.names, function(x) write.xlsx2(results.list[[x]], file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=x, append=TRUE))
options(java.parameters = "-Xmx2048m")
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
x
test
library(xlsx)
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
saveRDS(result.frame, "/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/ResultFrame.rds")
saveRDS(results.list, "/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/ResultsList.rds")
libraryxlsx
library(xlsx)
dyn.load(paste0(system2('/usr/libexec/java_home', stdout = TRUE), '/jre/lib/server/libjvm.dylib'))
library(xlsx)
loadRDS("~/Dropbox/Documents/Chaco/Tree Rings/Results/ResultFrame.rds")
readRDS("~/Dropbox/Documents/Chaco/Tree Rings/Results/ResultFrame.rds")
result.frame <- readRDS("~/Dropbox/Documents/Chaco/Tree Rings/Results/ResultFrame.rds")
results.list <- readRDS("~/Dropbox/Documents/Chaco/Tree Rings/Results/ResultsList.rds")
head(results.list[[1]])
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
results.list.names <- names(results.list)
options(java.parameters = "-Xmx2048m")
pblapply(results.list.names, function(x) write.xlsx2(results.list[[x]], file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=x, append=TRUE))
library(pbapply)
pblapply(results.list.names, function(x) write.xlsx2(results.list[[x]], file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=x, append=TRUE))
library(xlsx)
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
library(xlsx)
dyn.load(paste0(system2('/usr/libexec/java_home', stdout = TRUE), '/jre/lib/server/libjvm.dylib'))
library(xlsx)
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
dyn.load(paste0(system2('/usr/libexec/java_home', stdout = TRUE), '/jre/lib/server/libjvm.dylib'))
library(xlsx)
library(pbapply)
result.frame <- readRDS("~/Dropbox/Documents/Chaco/Tree Rings/Results/ResultFrame.rds")#
results.list <- readRDS("~/Dropbox/Documents/Chaco/Tree Rings/Results/ResultsList.rds")#
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")#
#
results.list.names <- names(results.list)
options(java.parameters = "-Xmx4096m")
pblapply(results.list.names, function(x) write.xlsx2(results.list[[x]], file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=x, append=TRUE))
dyn.load(paste0(system2('/usr/libexec/java_home', stdout = TRUE), '/jre/lib/server/libjvm.dylib'))
library(pbapply)
library(xlsx)
options(java.parameters = "-Xmx4096m")
jgc <- function()#
{#
  gc()#
  .jcall("java/lang/System", method = "gc")#
}
library(openxlsx)
install.packages("openxlsx")
library(openxlsx)
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
result.frame <- readRDS("~/Dropbox/Documents/Chaco/Tree Rings/Results/ResultFrame.rds")#
results.list <- readRDS("~/Dropbox/Documents/Chaco/Tree Rings/Results/ResultsList.rds")
write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
results.list.names <- names(results.list)
pblapply(results.list.names, function(x) write.xlsx2(results.list[[x]], file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=x, append=TRUE))
openxlsx::write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
pblapply(results.list.names, function(x) openxlsx::write.xlsx(results.list[[x]], file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName=x, append=TRUE))
openxlsx::write.xlsx(result.frame, file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/DendrochronologyResults.xlsx", sheetName="Summary")
?write.xlsx
write.xlsx(results.list, "ChacoTreesFullDates.xlsx", colWidths = c(NA, "auto", "auto"))
write.xlsx(results.list, "/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/ChacoTreesFullDates.xlsx", colWidths = c(NA, "auto", "auto"))
x <- c(1, 2, 3, T)
y <- c(T, 5, 6, 7)
xy.frame <- data.frame(x, y)
xy.frame[xy.frame=="T"] <- 999
xy.frame
xy.frame <- data.frame(x, y)
xy.frame
x <- c(1, 2, 3, "T")
y <- c("T", 5, 6, 7)
xy.frame <- data.frame(x, y)
xy.frame
xy.frame[xy.frame=="T"] <- 999
xy.frame
xy.frame <- data.frame(x, y)
xy.frame[xy.frame=="T"] <- "999"
xy.frame
xy.frame <- data.frame(x, y)
xy.frame[which(xy.frame=="T", arr.ind=TRUE), 3] <- 999
xy.frame
concentration.table[concentration.table==T"] <- 999
)
xy.frame <- data.frame(x, y)
xy.frame[xy.frame ==T] <- 999
xy.frame
xy.frame[xy.frame ==as.chacter("T")] <- 999
xy.frame[xy.frame ==as.character("T")] <- 999
xy.frame
xy.frame <- data.frame(x, y)
xy.frame[xy.frame =="T"] <- as.factor(999)
xy.frame
xy.frame <- data.frame(x, y, stringsAsFactors=TRUE)
xy.frame[xy.frame =="T"] <- as.factor(999)
xy.frame
xy.frame <- data.frame(x=numeric(3), y=numeric(3))
xy.frame
xy.frame <- data.frame(x=character(3), y=character(3))
xy.frame
xy.frame <- data.frame(x=factor(3), y=factor(3))
xy.frame
xy.frame <- data.frame(x=factor, y=factor)
xy.frame <- data.frame(x, y, stringsAsFactors=FALSE)
xy.frame
xy.frame[xy.frame =="T"] <- as.factor(999)
xy.frame
xy.frame <- data.frame(x, y, stringsAsFactors=FALSE)
xy.frame[xy.frame =="T"] <- 999
xy.frame
lm(y~x, data=xy.frame)
library(shiny)
runApp("~/GitHub/CloudCal")
library(rsconnect)
deployApp("~/GitHub/CloudCal", appName="cloudCal")
x
xy.frame$x <- c()
xy.frame
runApp("~/GitHub/CloudCal")
xy.frame
runApp("~/GitHub/CloudCal")
?saveRDS
runApp("~/GitHub/CloudCal")
?saveRDS
runApp("~/GitHub/CloudCal")
?readRDS
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCore")
runApp("~/GitHub/CloudCal")
test <- readRDS("~/Desktop/booluk.quant")
str(test)
test2 <- readRDS("~/Desktop/Cal Variations/Spectra/lukasTime.quant")
str(test2)
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(rsconnect)
deployApp("~/GitHub/CloudCal", appName="cloudCal")
x <- c(1, 2, 3, 4, 5, 6)
y <- c(5, 6, 7, 8, 9)
z <- c(4, 5, 6, 7, 8)
xyz.frame <- data.frame(x, y, z)
x <- c(1, 2, 3, 4, 5)
xyz.frame <- data.frame(x, y, z)
ggplot(aes(y~.), data=xyz.frame)
x*xyz.frame
rbind(xyz.frame)
rowSums(xyz.frame)
rowMeans(xyz.frame)
runApp("~/GitHub/CloudCal")
library(shiny)
?checkboxInput
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
library(formattable)
install.packages("formattable")
install.packages("formattable")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
percent(.05)
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp(list(#
  ui = basicPage(#
    tags$head(tags$style(".table .alignRight {color: blue; text-align:right;}")),#
    h2('The mtcars data'),#
    dataTableOutput('mytable')#
  ),#
  server = function(input, output) {#
    output$mytable = renderDataTable({#
      mtcars#
    }, options =list(aoColumnDefs = list(list(sClass="alignRight",aTargets=c(list(3),list(4),list(5))))  ))#
  }#
))
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
?tagList
?tagList
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")

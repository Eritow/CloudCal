ggsave(#
grid.arrange(ck.1022.scale.density,ck.565.scale.density, nrow=2, ncol=1),#
file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/ExamplePlot.tiff", device="tiff", dpi=300, width=5, height=7, compression="lzw", type="cairo")
ggsave(#
grid.arrange(ck.1022.scale.density,ck.565.scale.density, nrow=2, ncol=1),#
file="/Users/lee/Dropbox/Documents/Chaco/Tree Rings/Results/ExamplePlot.tiff", device="tiff", dpi=300, width=10, height=14, compression="lzw", type="cairo")
2^1
2^2
2^40
library(ggmap)
library(shiny)
runApp("~/GitHub/treeSource")
install.packages("rJava")
runApp("~/GitHub/treeSource")
system("java -version")
runApp("~/GitHub/treeSource")
library(xlsx)
install.packages("rJava")
library(xlsx)
install.packages('rJava', type='source')
library(xlsx)
Sys.setenv(JAVA_HOME = '/Library/Java//Home')
library(xlsx)
â€œdyn.load("/usr/libexec/java_home")
dyn.load("/usr/libexec/java_home")
library(xlsx)
dyn.load(paste0(system2('/usr/libexec/java_home', stdout = TRUE), '/jre/lib/server/libjvm.dylib'))
library(xlsx)
library(shiny)
runApp("~/GitHub/treeSource")
library(devtools)#
install_github("SOfun", "mrdwab")
install.packages("overflow")
library(devtools)#
install_github("SOfun", "mrdwab", "overflow")
library(devtools)#
install_github("mrdwab/SOfun"
)
?install_github
x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
y <- c(11, 22, 33, 44, 55, 66, 77 ,88, 99, 110)
years <- seq(1900, 1910, 1)
length(years)
years <- seq(1901, 1910, 1)
shift <- function(x, n){#
    c(x[-(seq(n))], seq(1, n, 1))#
}#
#
treeShift <- function(x, n){#
    c(x[-(seq(n))], x[1:n])#
}
treeShift(years, 5)
y.frame <- data.frame(years, y)
y.frame
lm.list <- pblapply(x, function(x) summary(lm(x~treeShift(y.frame[,2], x)))$r.squared)
length(x)
ser <- x
boop <- x*5
lm.list <- pblapply(ser, function(x) summary(lm(boop~treeShift(y.frame[,2], x)))$r.squared)
lm.list
as.vector(lm.list)
unlist(lm.list)
r2.vector <- as.vector(unlist(lm.list))
r2.vector
tValue <- function(r2, n){#
    sqrt(r2)*sqrt(n-2)/sqrt(1-r2)#
}
t.value.list <- pblapply(r2.vector, function(x) tValue(x, 10))
t.value.vector <- as.vector(unlist(t.value.list))
t.value.vector
t.scale.vector <- t(apply(t.value.vector, 1, function(x) scale(x)[,1]))
t.scale.vector <- t(apply(t.value.vector[1:9], 1, function(x) scale(x)[,1]))
scale(t.value.vector)
scale(t.value.vector[1:9])
t.scale.vector <- scale(t.value.vector[1:9])[,1]))
t.value.vector[10] <- 99
t.value.vector
scale(t.value.vector)
t.scale.vector <- scale(t.value.vector)[,1]
t.scale.vector
scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)
scaled.z.vector <- apply(t.scale.vector, function(x) (x/scaled.mean)/scaled.sd)
zValueVector <- function(scaled.t.value, scaled.mean, scaled.sd){#
    (scaled.t.value-scaled.mean)/scaled.sd#
#
}
scaled.z.vector <- apply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))
scaled.z.vector <- apply(t.scale.vector, 1, function(x) zValueVector(x, scaled.mean, scaled.sd))
scaled.z.vector <- pblapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))
scaled.z.vector <- as.vector(unlist(pblapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))
scaled.z.vector
t.scale.vector
-0.3027554/scaled.mean
(-0.3027554/scaled.mean)/scaled.sd
(2.8455526/scaled.mean)/scaled.sd
zValueVector <- function(scaled.t.value, scaled.mean, scaled.sd){#
    (scaled.t.value-scaled.mean)/scaled.sd#
#
}
scaled.z.vector <- as.vector(unlist(pblapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))
scaled.z.vector
t.value.vector
t.value.vector[10] <- 9
t.value.vector
t.scale.vector <- scale(t.value.vector)[,1]
t.scale.vector
scaled.mean <- mean(t.scale.vector)
scaled.mean
t.value.vector[10] <- 1.5
t.scale.vector <- scale(t.value.vector)[,1]
t.scale.vector
scaled.mean <- mean(t.scale.vector)
scaled.mean
sum(t.scale.vector)
t.scale.vector
sd(t.scale.vector)
scaled.z.vector <- as.vector(unlist(pblapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))
scaled.z.vector
pValueVector <- function(scaled.z.value){#
    1-pnorm(scaled.z.value)#
}
scaled.p.vector <- as.vector(unlist(pblapply(scaled.z.vector, pValueVector)))
scaled.p.vector
tree.sequence <- read.csv(file="~/Desktop/CK156.csv")
source.sequence <- read.csv(file="~/Desktop/sanjuansource.csv")
head(tree.sequence)
tree.sequence <- read.csv(file="~/Desktop/CK156.csv")
head(tree.sequence)
head(source.sequence)
tree.length <- length(tree.sequence[,1])
tree.length
tree.order <- seq(1, tree.length, 1)
tree.order
r2.vector <- as.vector(unlist(pblapply(tree.order, function(x) summary(lm(tree.sequence[,1]~treeShift(source.sequence[,2], x)))$r.squared)))
head(source.sequence[,])
head(source.sequence[,2])
tree.sequence.na <- c(tree.sequence, rep(NA, length(source.sequence-tree.sequence)))
tree.sequence.na <- c(tree.sequence, rep(NA, length(length(source.sequence)-length(tree.sequence))))
tail(tree.sequence.na)
neutral <- rep(NA, length(length(source.sequence)-length(tree.sequence)))
neutral
tree.sequence.na <- c(tree.sequence, rep(NA, length(length(source.sequence[,1])-length(tree.sequence[,1]))))
tail(tree.sequence.na)
source.length <- length(source.sequence[,1])
source.length
the.gap <- source.length-tree.length
the.gap
rep(NA, the.gap)
tree.sequence.na <- c(tree.sequence, rep(NA, the.gap))
tail(tree.sequence.na)
tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))
tail(tree.sequence.na)
head(tree.sequence.na)
length(tree.sequence.na)
?lm
r2.vector <- as.vector(unlist(pblapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))
head(r2.vector)
tail(rt.vector)
tail(r2.vector)
r2.vector
tree.order <- seq(1, source.length, 1)
r2.vector <- as.vector(unlist(pblapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))
max(r2.vector)
t.value.vector <- as.vector(unlist(pblapply(r2.vector, function(x) tValue(x, tree.length))))
max(t.value.vector)
t.value.vector <- as.vector(unlist(t.value.list))
t.scale.vector <- scale(t.value.vector)[,1]
max(t.scale.vector)
head(t.value.vector)
t.value.vector <- as.vector(unlist(pblapply(r2.vector, function(x) tValue(x, tree.length))))
length(t.value.vector)
t.scale.vector <- scale(t.value.vector)[,1]
head(t.scale.vector)
max(t.scale.vector)
scaled.mean <- mean(t.scale.vector)
scaled.mean
scaled.sd <- sd(t.scale.vector)
scaled.z.vector <- as.vector(unlist(pblapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))
scaled.p.vector <- as.vector(unlist(pblapply(scaled.z.vector, pValueVector)))
min(scaled.p.vector)
results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)
colnames(results.frame) <- c("Year", "r2", "t-value", "Z score", "p-value")
write.table(results.frame, "yeartest.csv", sep=",")
x <- c(1, 2, 3)
x[,1]
as.data.frame(x)
x.frame <- as.data.frame(x)
as.data.frame(x.frame)
yearJackKnife <- function(tree.sequence, source.sequence){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(pblapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(pblapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(pblapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(pblapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t-value", "Z score", "p-value")#
    results.frame#
}
chaco.trees <- read.csv(file="~/Desktop/chacotreesfordating.csv")
result.list <- pblapply(chaco.trees, function(x) yearJackKnife(x, source.sequence))
yearJackKnife <- function(tree.sequence, source.sequence){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t-value", "Z score", "p-value")#
    results.frame#
}
result.list <- pblapply(chaco.trees, function(x) yearJackKnife(x, source.sequence))
save(result.list, file="treedatefull.rdata")
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "year")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t-value", "Z score", "p-value")#
    result.year <- results.frame$Year[apply(p-value,1,which.max)]#
    if(return="fullframe"){#
    results.frame#
    }else if(return="year"){#
        result.year#
    }#
}
head(results.frame)
result.year <- results.frame$Year[apply(p-value,1,which.max)]
result.year <- results.frame$Year[apply(results.frame$p-value,1,which.max)]
result.year <- results.frame$Year[apply(results.frame[,5],1,which.max)]
which.min(results.frame[,5])
head(results.frame)
head(results.frame[,5])
min(results.frame[,5])
?which.min
result.year <- results.frame[,1][which.min(results.frame[,5])]
result.year
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "year")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t-value", "Z score", "p-value")#
    result.year <- results.frame[,1][which.min(results.frame[,5])]#
    if(return="fullframe"){#
    results.frame#
    }else if(return="year"){#
        result.year#
    }#
}
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "year")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t-value", "Z score", "p-value")#
    result.year <- results.frame[,1][which.min(results.frame[,5])]#
    if(return=="fullframe"){#
    results.frame#
    }else if(return=="year"){#
        result.year#
    }#
}
result.list <- pblapply(chaco.trees, function(x) yearJackKnife(x, source.sequence, return="year"))
colname(tree.sequence)
colnames(tree.sequence)
library(pbapply)
source.sequence <- read.csv(file="~/Desktop/sanjuansource.csv")
chacotrees <- read.csv(file="~/Desktop/chacotreesfordating.csv")
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "year")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t-value", "Z score", "p-value")#
    result.year <- results.frame[,1][which.min(results.frame[,5])]#
    result.year <- as.data.frame(result.year)#
    colnames(result.year) <- colname(tree.sequence)#
    if(return=="fullframe"){#
    results.frame#
    }else if(return=="year"){#
        result.year#
    }#
}
result.list <- pblapply(chaco.trees, function(x) yearJackKnife(x, source.sequence, return="year"))
result.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="year"))
treeShift <- function(x, n){#
    c(x[-(seq(n))], x[1:n])#
}#
#
tValue <- function(r2, n){#
    sqrt(r2)*sqrt(n-2)/sqrt(1-r2)#
}#
#
zValueVector <- function(scaled.t.value, scaled.mean, scaled.sd){#
    (scaled.t.value-scaled.mean)/scaled.sd#
#
}#
#
pValueVector <- function(scaled.z.value){#
    1-pnorm(scaled.z.value)#
}
result.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="year"))
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "year")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t-value", "Z score", "p-value")#
    result.year <- results.frame[,1][which.min(results.frame[,5])]#
    result.year <- as.data.frame(result.year)#
    colnames(result.year) <- colnames(tree.sequence)#
    if(return=="fullframe"){#
    results.frame#
    }else if(return=="year"){#
        result.year#
    }#
}
result.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="year"))
head(result.list)
result.list
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "year")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t-value", "Z score", "p-value")#
    result.year <- results.frame$Year[which.min(results.frame[,5])]#
    result.year <- as.data.frame(result.year)#
    colnames(result.year) <- colnames(tree.sequence)#
    if(return=="fullframe"){#
    results.frame#
    }else if(return=="year"){#
        result.year#
    }#
}
yearJackKnife(chacotrees[,1], source.sequence, return="year")
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "year")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t-value", "Z score", "p-value")#
    result.min <- which.min(results.frame[,5])#
    result.year <- results.frame$Year[result.min,]#
    result.year <- as.data.frame(result.year)#
    colnames(result.year) <- colnames(tree.sequence)#
    if(return=="fullframe"){#
    results.frame#
    }else if(return=="year"){#
        result.year#
    }#
}
yearJackKnife(chacotrees[,1], source.sequence, return="year")
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "year")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t-value", "Z score", "p-value")#
    result.min <- which.min(results.frame[,5])#
    result.year <- results.frame$Year[result.min]#
    result.year <- as.data.frame(result.year)#
    colnames(result.year) <- colnames(tree.sequence)#
    if(return=="fullframe"){#
    results.frame#
    }else if(return=="year"){#
        result.year#
    }#
}
yearJackKnife(chacotrees[,1], source.sequence, return="year")
x <- c(1, 2, 3, 4, 5)
x[4]
baby <- 4
x[baby]
x <- c(5, 4, 3, 2, 1)
x[baby]
test <- yearJackKnife(chacotrees[,1], source.sequence, return="fullframe")
head(test)
which.min(test$p-value)
which.min(test$[,5])
which.min(test[,5])
tail(test)
test[1308,]
test[1309,]
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "year")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.sequence <- tree.sequence[!is.na(tree.sequence[,1])]#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t-value", "Z score", "p-value")#
    result.min <- which.min(results.frame[,5])#
    result.year <- results.frame$Year[result.min]#
    result.year <- as.data.frame(result.year)#
    colnames(result.year) <- colnames(tree.sequence)#
    if(return=="fullframe"){#
    results.frame#
    }else if(return=="year"){#
        result.year#
    }#
}
yearJackKnife(chacotrees[,1], source.sequence, return="year")
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "year")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.sequence <- tree.sequence[,1][!is.na(tree.sequence[,1])]#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t-value", "Z score", "p-value")#
    result.min <- which.min(results.frame[,5])#
    result.year <- results.frame$Year[result.min]#
    result.year <- as.data.frame(result.year)#
    colnames(result.year) <- colnames(tree.sequence)#
    if(return=="fullframe"){#
    results.frame#
    }else if(return=="year"){#
        result.year#
    }#
}
yearJackKnife(chacotrees[,1], source.sequence, return="year")
result.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="year"))
head(result.list)
result.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="year"))
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "year")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.sequence <- tree.sequence[,1][!is.na(tree.sequence[,1])]#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t-value", "Z score", "p-value")#
    result.min <- which.min(results.frame[,5])#
    result.year <- results.frame$Year[result.min]-1#
    result.year <- as.data.frame(result.year)#
    #colnames(result.year) <- colnames(tree.sequence)#
    if(return=="fullframe"){#
    results.frame#
    }else if(return=="year"){#
        result.year#
    }#
}
result.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="year"))
head(result.list)
trees <- names(result.list)
head(trees)
test <- as.vector(unlist(result.list))
head(test)
result.frame <- data.frame(trees, test)
colnames(result.frame("Tree", "Year"))
colnames(result.frame) <- c("Tree", "Year"))
colnames(result.frame) <- c("Tree", "Year")
head(result.frame)
write.table(result.frame, "treeresults.csv", sep=",")
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "year")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.sequence <- tree.sequence[,1][!is.na(tree.sequence[,1])]#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t-value", "Z score", "p-value")#
    result.min <- which.min(results.frame[,5])#
    result.year <- results.frame$Year[result.min]#
    result.year <- as.data.frame(result.year)#
    #colnames(result.year) <- colnames(tree.sequence)#
    if(return=="fullframe"){#
    results.frame#
    }else if(return=="year"){#
        result.year#
    }#
}#
#
result.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="year"))#
trees <- names(result.list)#
test <- as.vector(unlist(result.list))#
result.frame <- data.frame(trees, test)#
colnames(result.frame) <- c("Tree", "Year")#
write.table(result.frame, "treeresults.csv", sep=",")
library(pbapply)
chacotrees <- read.csv(file="~/Desktop/chacotreesfordating.csv")
source.sequence <- read.csv(file="~/Desktop/sanjuansourcesmall.csv")
treeShift <- function(x, n){#
    c(x[-(seq(n))], x[1:n])#
}#
#
tValue <- function(r2, n){#
    sqrt(r2)*sqrt(n-2)/sqrt(1-r2)#
}#
#
zValueVector <- function(scaled.t.value, scaled.mean, scaled.sd){#
    (scaled.t.value-scaled.mean)/scaled.sd#
#
}#
#
pValueVector <- function(scaled.z.value){#
    1-pnorm(scaled.z.value)#
}#
yearJackKnife <- function(tree.sequence, source.sequence, return=c("fullframe", "year")){#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.sequence <- tree.sequence[,1][!is.na(tree.sequence[,1])]#
    tree.sequence <- as.data.frame(tree.sequence)#
    tree.length <- length(tree.sequence[,1])#
    source.length <- length(source.sequence[,1])#
    the.gap <- source.length-tree.length#
    tree.order <- seq(1, source.length, 1)#
    tree.sequence.na <- c(tree.sequence[,1], rep(NA, the.gap))#
    r2.vector <- as.vector(unlist(lapply(tree.order, function(x) summary(lm(tree.sequence.na~treeShift(source.sequence[,2], x)))$r.squared)))#
    t.value.vector <- as.vector(unlist(lapply(r2.vector, function(x) tValue(x, tree.length))))#
    t.scale.vector <- scale(t.value.vector)[,1]#
    scaled.mean <- mean(t.scale.vector)#
    scaled.sd <- sd(t.scale.vector)#
    scaled.z.vector <- as.vector(unlist(lapply(t.scale.vector, function(x) zValueVector(x, scaled.mean, scaled.sd))))#
    scaled.p.vector <- as.vector(unlist(lapply(scaled.z.vector, pValueVector)))#
    results.frame <- data.frame(source.sequence[,1], r2.vector, t.value.vector, scaled.z.vector, scaled.p.vector)#
    colnames(results.frame) <- c("Year", "r2", "t-value", "Z score", "p-value")#
    result.min <- which.min(results.frame[,5])#
    result.year <- results.frame$Year[result.min]#
    result.year <- as.data.frame(result.year)#
    #colnames(result.year) <- colnames(tree.sequence)#
    if(return=="fullframe"){#
    results.frame#
    }else if(return=="year"){#
        result.year#
    }#
}#
#
result.list <- pblapply(chacotrees, function(x) yearJackKnife(x, source.sequence, return="year"))#
trees <- names(result.list)#
test <- as.vector(unlist(result.list))#
result.frame <- data.frame(trees, test)#
colnames(result.frame) <- c("Tree", "Year")#
write.table(result.frame, "treeresultssmall.csv", sep=",")
library(shiny)
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")

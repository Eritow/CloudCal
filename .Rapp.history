library(shiny)
calList[["Fe.K.alpha"]][[1]]$Slope
runApp("~/Github/CloudCal")
runApp("~/Github/Cezanne")
library(shiny)
runApp("~/Github/Cezanne")
library(shiny)
runApp("~/Github/CloudCal")
library(shiny)
runApp("~/Github/CloudCal")
test <- readRDS("~/Desktop/900F4470MudrockNewHe.quant")
str(test)
calList <- test$calList
calList[["Fe.K.alpha"]]$StandardsUsed
calList[["Fe.K.alpha"]]$CalTable$StandardsUsed
calList[["Fe.K.alpha"]]$StandardsUsed
calList[["Fe.K.alpha"]][[5]]
ls(calList)
ls(calList[["Al.K.alpha"]])
ls(calList[[,"Al.K.alpha"]])
calList[["Al.K.alpha"]]
calList[["Al.K.alpha"]][[1]]$StandardsUsed
calList[["Al.K.alpha"]][[1]][[5]]
calList[["Al.K.alpha"]][[1]][[4]]
library(shiny)
runApp("~/GitHub/CloudCal")
library(rsconnect)
deployApp("~/Desktop/CloudCal", appName="cloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCore")
library(shiny)
runApp("~/GitHub/CloudCore")
x <- c(1, 2, 3, 4, 5)
y <- c(, 2, 3, 4, 5, 6)
y <- c( 2, 3, 4, 5, 6)
z <- (10, 11, 12, 13, 14, 15)
z <- c(10, 11, 12, 13, 14, 15)
xy.frame <- data.frame(x, y)
yz.frame <- data.frame(y, z)
z <- c(10, 11, 12, 13, 14)
xy.frame <- data.frame(x, y)
yz.frame <- data.frame(y, z)
merge(xy.frame, yz.frame, by="z")
yz.frame
merge(xy.frame, yz.frame, by="z", all=TRUE)
merge(xy.frame, yz.frame, by="y", all=TRUE)
z <- c(10, 11, 12, 13, 14, 15)
y <- c( 2, 3, 4, 5, 6, 7)
merge(xy.frame, yz.frame, by="y", all=TRUE)
yz.frame <- data.frame(y, z)
merge(xy.frame, yz.frame, by="y", all=TRUE)
runApp("~/GitHub/CloudCore")
library(zoo)
bob <- merge(xy.frame, yz.frame, by="y", all=TRUE)
bob
bob[complete.cases(bob),]
complate.cases(merge(xy.frame, yz.frame, by="y", all=TRUE))
complete.cases(merge(xy.frame, yz.frame, by="y", all=TRUE))
runApp("~/GitHub/CloudCore")
runApp("~/GitHub/CloudCal")
test <- readRDS("~/Desktop/T4S1864MudrockTrace.quant")
test <- loadRDS("~/Desktop/T4S1864MudrockTrace.quant")
test <- readRDS("~/Desktop/T4S1864MudrockTrace.quant")
test <- readRDS("~/Desktop/T3S1716MudrockMajor.quant")
str(test)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCore")
library(shiny)
runApp("~/GitHub/xrf-app")
?shinythemes
runApp("~/GitHub/xrf-app")
x1 <- c(1, 2, 3)
y1 <- c(5, 6, 7)
xy1.frame <- data.frame(x1, y1)
x1 <- c(11, 12, 13)
y1 <- c(51, 61, 71)
xy2.frame <- data.frame(x1, y1)
merge(xy1.frame, xy2.frame)
merge(xy1.frame, xy2.frame, by=c(x1, y1))
merge(xy1.frame, xy2.frame, by.x=c(x1, y1))
merge(xy1.frame, xy2.frame, by.y=c(x1, y1))
merge(xy1.frame, xy2.frame, all=TRUE)
runApp("~/GitHub/multiInstrument")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/multiInstrument")
runApp("~/GitHub/spreadSheet")
sample(seq(from = 20, to = 50, by = 5), size = 50, replace = TRUE)
runApp("~/GitHub/spreadSheet")
x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9)
seq(1, length(x), 1)
runApp("~/GitHub/spreadSheet")
library(shiny)
runApp("~/GitHub/spreadSheet")
?nearPoints
runApp("~/GitHub/spreadSheet")
library("shiny")#
library("ggplot2")#
#
ui <- pageWithSidebar(#
  headerPanel("Tooltips in ggplot2 + shiny"),#
  sidebarPanel(#
    HTML("Tooltips are managed by combination of shiny+ggplot hover functionality",#
         "and css styles. By setting hover argument of 'plotOutput' we could access",#
         "hover data from the server side, as an ordinary input. Hover input is",#
         "a list with: position of cursor ON the image; domain - that is",#
         "values of variables at the plotting area edges; range - that is position",#
         "of plotting area edges in pixels relative to whole image element.",#
         "Additionally for ggplot used mappings are returned. </br>",#
         "To create tooltip first we need to identify position of the cursor",#
         "inside the image element. We do it by calculating distances from left and",#
         "top edge of image element from hover data. Then we create tooltip, in this",#
         "app it is 'wellPanel' with some info inside, and set 'position' property",#
         "to 'absolute' and set 'left' and 'top' properties to calculated values.",#
         "However, 'absolute' position is defined as relative to the nearest positioned",#
         "ancestor. Because we want to position tooltip inside the image, we need",#
         "to put both 'plotOutput' with image and 'uiOutput' with tooltip content",#
         "inside additional 'div' element with 'position' property set to 'relative'.",#
         "We don't set top, left etc. for this element, so the actual position of",#
         "the image doesn't change - it's edges are identical as previously, so",#
         "we can use 'div' (for positioning tooltip) as substitute for image. </br>"),#
    width = 3#
  ),#
  mainPanel(#
    # this is an extra div used ONLY to create positioned ancestor for tooltip#
    # we don't change its position#
    div(#
      style = "position:relative",#
      plotOutput("scatterplot", #
                 hover = hoverOpts("plot_hover", delay = 100, delayType = "debounce")),#
      uiOutput("hover_info")#
    ),#
    width = 7#
  )#
)#
#
server <- function(input, output) {#
  output$scatterplot <- renderPlot({#
    ggplot(mtcars, aes(x = mpg, y = hp)) +#
      geom_point()#
  })#
  output$hover_info <- renderUI({#
    hover <- input$plot_hover#
    point <- nearPoints(mtcars, hover, threshold = 5, maxpoints = 1, addDist = TRUE)#
    if (nrow(point) == 0) return(NULL)#
    # calculate point position INSIDE the image as percent of total dimensions#
    # from left (horizontal) and from top (vertical)#
    left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)#
    top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)#
    # calculate distance from left and bottom side of the picture in pixels#
    left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)#
    top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)#
    # create style property fot tooltip#
    # background color is set so tooltip is a bit transparent#
    # z-index is set so we are sure are tooltip will be on top#
    style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",#
                    "left:", left_px + 2, "px; top:", top_px + 2, "px;")#
    # actual tooltip created as wellPanel#
    wellPanel(#
      style = style,#
      p(HTML(paste0("<b> Car: </b>", rownames(point), "<br/>",#
                    "<b> mpg: </b>", point$mpg, "<br/>",#
                    "<b> hp: </b>", point$hp, "<br/>",#
                    "<b> Distance from left: </b>", left_px, "<b>, from top: </b>", top_px)))#
    )#
  })#
}#
#
runApp(list(ui = ui, server = server))
runApp("~/GitHub/spreadSheet")
library("shiny")#
library("ggplot2")#
#
ui <- pageWithSidebar(#
  headerPanel("Tooltips in ggplot2 + shiny"),#
  sidebarPanel(#
    HTML("Tooltips are managed by combination of shiny+ggplot hover functionality",#
         "and css styles. By setting hover argument of 'plotOutput' we could access",#
         "hover data from the server side, as an ordinary input. Hover input is",#
         "a list with: position of cursor ON the image; domain - that is",#
         "values of variables at the plotting area edges; range - that is position",#
         "of plotting area edges in pixels relative to whole image element.",#
         "Additionally for ggplot used mappings are returned. </br>",#
         "To create tooltip first we need to identify position of the cursor",#
         "inside the image element. We do it by calculating distances from left and",#
         "top edge of image element from hover data. Then we create tooltip, in this",#
         "app it is 'wellPanel' with some info inside, and set 'position' property",#
         "to 'absolute' and set 'left' and 'top' properties to calculated values.",#
         "However, 'absolute' position is defined as relative to the nearest positioned",#
         "ancestor. Because we want to position tooltip inside the image, we need",#
         "to put both 'plotOutput' with image and 'uiOutput' with tooltip content",#
         "inside additional 'div' element with 'position' property set to 'relative'.",#
         "We don't set top, left etc. for this element, so the actual position of",#
         "the image doesn't change - it's edges are identical as previously, so",#
         "we can use 'div' (for positioning tooltip) as substitute for image. </br>"),#
    width = 3#
  ),#
  mainPanel(#
    tabsetPanel(#
    tabPanel("bob",#
    # this is an extra div used ONLY to create positioned ancestor for tooltip#
    # we don't change its position#
    div(#
      style = "position:relative",#
      plotOutput("scatterplot", #
                 hover = hoverOpts("plot_hover", delay = 100, delayType = "debounce")),#
      uiOutput("hover_info")#
    ),#
    width = 7#
  )#
)))#
#
server <- function(input, output) {#
  output$scatterplot <- renderPlot({#
    ggplot(mtcars, aes(x = mpg, y = hp)) +#
      geom_point()#
  })#
  output$hover_info <- renderUI({#
    hover <- input$plot_hover#
    point <- nearPoints(mtcars, hover, threshold = 5, maxpoints = 1, addDist = TRUE)#
    if (nrow(point) == 0) return(NULL)#
    # calculate point position INSIDE the image as percent of total dimensions#
    # from left (horizontal) and from top (vertical)#
    left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)#
    top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)#
    # calculate distance from left and bottom side of the picture in pixels#
    left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)#
    top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)#
    # create style property fot tooltip#
    # background color is set so tooltip is a bit transparent#
    # z-index is set so we are sure are tooltip will be on top#
    style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",#
                    "left:", left_px + 2, "px; top:", top_px + 2, "px;")#
    # actual tooltip created as wellPanel#
    wellPanel(#
      style = style,#
      p(HTML(paste0("<b> Car: </b>", rownames(point), "<br/>",#
                    "<b> mpg: </b>", point$mpg, "<br/>",#
                    "<b> hp: </b>", point$hp, "<br/>",#
                    "<b> Distance from left: </b>", left_px, "<b>, from top: </b>", top_px)))#
    )#
  })#
}#
#
runApp(list(ui = ui, server = server))
runApp("~/GitHub/spreadSheet")
?nearPoints
runApp("~/GitHub/spreadSheet")
x <- c(1, 2, 3)
y <- c(1, 2, 4)
test <- ggplot(aes(x, y))
xy.frame <- data.frame(x, y)
test <- ggplot(aes(x, y), xy.frame)
test
test <- ggplot(aes(x, y), xy.frame) + geom_point()
test <- ggplot(aes(x, y), data=xy.frame) + geom_point()
test
ggplot_build(test)$layout$panel_ranges[[1]]$y.range
ggplot_build(test)$layout$panel_ranges[[1]]$y.range[1]
my.ggp <- test
xmin <- ggplot_build(my.ggp)$layout$panel_ranges[[1]]$x.range[1]#
      xmax <- ggplot_build(my.ggp)$layout$panel_ranges[[1]]$x.range[2]#
      ymin <- ggplot_build(my.ggp)$layout$panel_ranges[[1]]$y.range[1]#
      ymax <- ggplot_build(my.ggp)$layout$panel_ranges[[1]]$y.range[2]
xmin
xmax
runApp("~/GitHub/spreadSheet")
x.range <- xmax-xmin
x.range
1/2.2
1/.45
runApp("~/GitHub/spreadSheet")
xmin <- -20
xmax <- 40
ymin <- -100
ymax <- 20
yrange <- ymax-ymin
xrange <- xmax-xmin
xrange*.6
36+-20
(40-16)/xrange
runApp("~/GitHub/spreadSheet")
runApp("~/GitHub/sheetCrunch")
?plotOutput
runApp("~/GitHub/sheetCrunch")
shiny::runApp("~/GitHub/CloudCore")
shiny::runApp("~/GitHub/CloudCal")

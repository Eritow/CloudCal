climate.time.series.line
climate.time.series.line <- qplot(Age,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period") +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_reverse("cal yr BP", label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
head(gisp2)
gisp2$Climate <- rev(climateperiods)
head(gisp2)
gisp2$Age2 <- gisp2$Age*-1
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period") +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
ggsave("~/Desktop/GIS2.jpg",climate.time.series.line, device="jpg", dpi=300, width=12, height=7)
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period") +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", limits=c(-29000, 0), label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period") +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", limits=c(-27000, -1000), label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period") +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", limits=c(-27000, -3000), label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
ggsave("~/Desktop/GIS2.jpg",climate.time.series.line, device="jpg", dpi=300, width=12, height=7)
ggplotColours <- function(n = 6, h = c(0, 360) + 15){#
  if ((diff(h) %% 360) < 1) h[2] <- h[2] - 360/n#
  hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)#
}
ggplotColours(7)
ggplotColours(8)
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_manual("Climatic Period",#
breaks=c("1. Late Holocene", "2. Altithermal", "3. Holocene Transition", "4. Younger Dryas", "5. Bølling-Allerød", "6. Deglaciation", "7. Last Glacial Maximum", "8. Glacial"),#
values=c("#F8766D", "#CD9600", "#7CAE00", "#00BE67", "#00BFC4", "#00A9FF", "#C77CFF", "#FF61CC" )) +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", limits=c(-27000, -3000), label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period", drop=FALSE) +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", limits=c(-27000, -1000), label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
gisp2 <- read.csv(file="~/Dropbox/Documents/University of Utah/gisp2.csv")
###GIPS2#
#
lateholocene <- subset(gisp2$Age, gisp2$Age <= 5000 & gisp2$Age > -1000)#
#
altithermal <- subset(gisp2$Age, gisp2$Age <= 9000 & gisp2$Age > 5000)#
#
holocenetransition <- subset(gisp2$Age, gisp2$Age <= 11700 & gisp2$Age > 9000)#
#
youngerdryas <- subset(gisp2$Age, gisp2$Age <= 12900 & gisp2$Age > 11700)#
#
bollingalerod <- subset(gisp2$Age, gisp2$Age <= 14700 & gisp2$Age > 12900)#
#
deglaciation <- subset(gisp2$Age, gisp2$Age <= 19000 & gisp2$Age > 14700)#
#
lastglacialmax <- subset(gisp2$Age, gisp2$Age <= 25000 & gisp2$Age > 19000)#
#
glacial <- subset(gisp2$Age, gisp2$Age <= 120000 & gisp2$Age > 25000)#
#
climateperiods <- c(#
rep("1. Late Holocene", length(lateholocene)),#
rep("2. Altithermal", length(altithermal)),#
rep("3. Holocene Transition", length(holocenetransition)),#
rep("4. Younger Dryas", length(youngerdryas)),#
rep("5. Bølling-Allerød", length(bollingalerod)),#
rep("6. Deglaciation", length(deglaciation)),#
rep("7. Last Glacial Maximum", length(lastglacialmax)),#
rep("8. Glacial", length(glacial))#
)#
#
gisp2$Climate <- rev(climateperiods)#
gisp2$Age2 <- gisp2$Age*-1
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period", drop=FALSE) +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", limits=c(-27000, -1000), label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
gisp2$Climate <- climateperiods#
gisp2$Age2 <- gisp2$Age*-1
climate.time.series.line <- qplot(Age2,Temperature..C., geom="line", data = gisp2, colour = as.factor(Climate)) +#
scale_colour_discrete("Climatic Period", drop=FALSE) +#
theme_light() +#
theme(axis.text.x = element_text(size=15)) +#
theme(axis.text.y = element_text(size=15)) +#
theme(axis.title.x = element_text(size=15)) +#
theme(axis.title.y = element_text(size=15, angle=90)) +#
theme(plot.title=element_text(size=20)) +#
theme(legend.title=element_text(size=15)) +#
theme(legend.text=element_text(size=15)) +#
scale_x_continuous("cal yr BP", limits=c(-27000, -1000), label=comma)+#
scale_y_continuous("Temperature (ºC)")
climate.time.series.line
ggsave("~/Desktop/GIS2.jpg",climate.time.series.line, device="jpg", dpi=300, width=12, height=7)
runApp("~/GitHub/CloudCore")
runApp("~/GitHub/CongressionalImpact")
runApp("~/GitHub/CongressImpact")
runApp("~/GitHub/CloudCore")
runApp("~/GitHub/Cezanne")
?interp
runApp("~/GitHub/Cezanne")
library(shiny)
runApp("~/GitHub/CloudCore")
GGSAVE
ggsave
runApp("~/GitHub/CloudCore")
ggplot2::ggsave
runApp("~/GitHub/CloudCore")
plot_dev
ggplot2::plot_dev
runApp("~/GitHub/CloudCore")
library(shiny)
runApp("~/GitHub/CloudCore")
library(shiny)
runApp("~/GitHub/Berkeley-webGeochemistry")
library(rgl)
bg3d("white") # if you want a black background#
rgl.spheres(0, 0, 0, texture="~/Dropbox/Documents/Anacom/Maps/Raw/Silicon.png", lit=FALSE)
raw <- read.csv(file="~/Dropbox/Documents/XRF-UNM-Stanford/Tokyo Test Results/Belize Total K0732/Total-Table 1.csv")
small.Ka1 <- data.frame(Rb.Ka1, Zr.Ka1, Y.Ka1, Nb.Ka1)#
#
hyp.Ka1 <- kmeans(small.Ka1, 3)#
#
plot3d(x= Rb.Ka1/Zr.Ka1, y= Sr.Ka1/Zr.Ka1, z= Y.Ka1/Zr.Ka1, zlab="Y/Zr", ylab="Sr/Zr", xlab="Rb/Zr", type="s",  size=.009, radius=.009, box=F)
####RATIOS#
ppm.plot <- qplot(Rb.ppm/Zr.ppm, Sr.ppm/Zr.ppm, data=raw, ylab = "Rb/Zr (ppm)", xlab = "Sr/Zr (ppm)", main = "Calibrated Data", colour=hyp.ppm$cluster) + theme_bw() + theme(legend.position="none") +  theme(legend.position="none")
small.Ka1 <- data.frame(Rb.Ka1, Zr.Ka1, Y.Ka1, Nb.Ka1)#
#
hyp.Ka1 <- kmeans(small.Ka1, 3)#
#
plot3d(x= Rb.Ka1/Zr.Ka1, y= Sr.Ka1/Zr.Ka1, z= Y.Ka1/Zr.Ka1, zlab="Y/Zr", ylab="Sr/Zr", xlab="Rb/Zr", type="s",  size=.009, radius=.009, box=F)
attach(raw)
small.Ka1 <- data.frame(Rb.Ka1, Zr.Ka1, Y.Ka1, Nb.Ka1)#
#
hyp.Ka1 <- kmeans(small.Ka1, 3)#
#
plot3d(x= Rb.Ka1/Zr.Ka1, y= Sr.Ka1/Zr.Ka1, z= Y.Ka1/Zr.Ka1, zlab="Y/Zr", ylab="Sr/Zr", xlab="Rb/Zr", type="s",  size=.009, radius=.009, box=F)
library(readxl)
?readxl
data <- read_excel("~/GitHub/web_geochemistry-master/inbound/Obsidian Sources.xlsx")
ls(data)
data <- read_excel("~/GitHub/web_geochemistry-master/inbound/Obsidian Sources.xlsx", 3)
ls(data)
head(data)
data <- read_excel("~/GitHub/web_geochemistry-master/inbound/Obsidian Sources.xlsx", 3, header=FALSE)
? read_excel
data <- read_excel("~/GitHub/web_geochemistry-master/inbound/Obsidian Sources.xlsx", 3, col_names=FALSE)
head(data)
data
data <- read_excel("~/GitHub/web_geochemistry-master/inbound/Obsidian Sources.xlsx", 3)
head(data)
data["Rb m"]
is.data.table(data)
data.dt <- data.table(data)
library(data.table)
data.dt <- data.table(data)
head(data.dt)
data.dt
library(shiny)
runApp("~/GitHub/Cezanne")
x <- c(1, 2)
y <- c(3, 4)
xy.frame <- data.frame(x, y)
head(xy.frame)
xy.frame[,1]
library(shiny)
runApp("~/GitHub/Cezanne")
x
y
z <- "b"
xy.frame <- data.frame(x, y, z)
xy.frame
runApp("~/GitHub/Cezanne")
x
rep(x, each=5)
data <- read.csv(file="~/GitHub/Cezanne/data/blackdiamondmelt.csv")
head(data)
Ne.Ka.frame <- subset(data, !(data$Energy < Ne.K[2]-0.02 | data$Energy > Ne.K[1]+0.02))
head(Ne.Ka.frame)
Ne.Ka.ag <- aggregate(list(Ne.Ka.frame$Counts), by=list(Ne.Ka.frame$Spectrum), FUN="sum")
Ne.Ka.ag <- aggregate(list(Ne.Ka.frame$CPS), by=list(Ne.Ka.frame$Spectrum), FUN="sum")
Ne.Ka.ag
library(shiny)
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCal")
library(rsconnect)
deployApp("~/GitHub/CloudCal", appName="xrf-calibrate")
install.packages("profvis")
deployApp("~/GitHub/CloudCal", appName="xrf-calibrate")
? profvis
?profvis
?runGitHub
runApp(install.git)`
)
?install_github
library(devtools)
?install_github
spectralLines <- c("Ne.Ka.ag", "Na.Ka.ag", "Mg.Ka.ag", "Al.Ka.ag", "Si.Ka.ag", "P.Ka.ag", "S.Ka.ag", "Cl.Ka.ag", "Ar.Ka.ag", "K.Ka.ag", "Ca.Ka.ag", "Sc.Ka.ag", "Ti.Ka.ag", "V.Ka.ag", "Cr.Ka.ag", "Mn.Ka.ag", "Fe.Ka.ag", "Co.Ka.ag", "Ni.Ka.ag", "Cu.Ka.ag", "Zn.Ka.ag", "Ga.Ka.ag", "Ge.Ka.ag", "As.Ka.ag", "Se.Ka.ag", "Br.Ka.ag", "Kr.Ka.ag", "Rb.Ka.ag", "Sr.Ka.ag", "Y.Ka.ag", "Zr.Ka.ag", "Nb.Ka.ag", "Mo.Ka.ag", "Mo.La.ag", "Mo.Lb.ag", "Ru.Ka.ag", "Ru.La.ag", "Ru.Lb.ag", "Rh.Ka.ag", "Rh.La.ag", "Rh.Lb.ag", "Pd.Ka.ag", "Pd.La.ag", "Pd.Lb.ag", "Ag.Ka.ag", "Ag.La.ag", "Ag.Lb.ag", "Cd.Ka.ag", "Cd.La.ag", "Cd.Lb.ag", "In.Ka.ag", "In.La.ag", "Sn.Ka.ag", "Sn.La.ag", "Sn.Lb.ag", "Sb.Ka.ag", "Sb.La.ag", "Sb.Lb.ag", "Te.Ka.ag", "Te.La.ag", "Te.Lb.ag", "I.Ka.ag", "I.La.ag", "I.Lb.ag", "Xe.Ka.ag", "Xe.La.ag", "Xe.Lb.ag", "Cs.Ka.ag", "Cs.La.ag", "Cs.Lb.ag", "Ba.Ka.ag", "Ba.La.ag", "Ba.Lb.ag", "La.Ka.ag", "La.La.ag", "La.Lb.ag", "Ce.Ka.ag", "Ce.La.ag", "Ce.Lb.ag", "Pr.Ka.ag", "Pr.La.ag", "Pr.Lb.ag", "Nd.Ka.ag", "Nd.La.ag", "Nd.Lb.ag", "Pm.La.ag", "Pm.Lb.ag", "Sm.La.ag", "Sm.Lb.ag", "Eu.La.ag", "Eu.Lb.ag", "Gd.La.ag", "Gd.Lb.ag", "Tb.La.ag", "Tb.Lb.ag", "Dy.La.ag", "Dy.Lb.ag", "Ho.La.ag", "Ho.Lb.ag", "Er.La.ag", "Er.Lb.ag", "Tm.La.ag", "Tm.Lb.ag", "Yb.La.ag", "Yb.Lb.ag", "Lu.La.ag", "Lu.Lb.ag", "Hf.La.ag", "Hf.Lb.ag", "Ta.La.ag", "Ta.Lb.ag", "W.La.ag", "W.Lb.ag", "Re.La.ag", "Re.Lb.ag", "Os.La.ag", "Os.Lb.ag", "Ir.La.ag", "Ir.Lb.ag", "Pt.La.ag", "Pt.Lb.ag", "Au.La.ag", "Au.Lb.ag", "Hg.La.ag", "Hg.Lb.ag", "Tl.La.ag", "Tl.Lb.ag", "Pb.La.ag", "Pb.Lb.ag", "Bi.La.ag", "Bi.Lb.ag", "Po.La.ag", "Po.Lb.ag", "At.La.ag", "At.Lb.ag", "Rn.La.ag", "Rn.Lb.ag", "Fr.La.ag", "Fr.Lb.ag", "Ra.La.ag", "Ra.Lb.ag", "Ac.La.ag", "Ac.Lb.ag", "Th.La.ag", "Th.Lb.ag", "Pa.La.ag", "Pa.Lb.ag", "U.La.ag", "U.Lb.ag")
runApp("~/GitHub/CloudCal")
paste("Sr", "K", collapse=".")
paste("Sr", "K", collapse="", sep=".")
test <- read.csv(file="~/GitHub/CloudCal/data/FluorescenceLines.csv")
head(test)
paste("Sr", "K-alpha", sep=" ")
test[5]
head(test[5])
head(test[6])
ls(test)
head(test)
head(test[19])
head(test[5])
head(test[6])
head(test[7])
head(test[8])
head(test[11])
head(test[10])
head(test[13])
head(test[12])
test <- Sr.K.alpha
testr <- "Sr.K.alpha"
strsplit(test, split=".")
strsplit(testr, split=".")
strsplit(testr, split=//".")
strsplit(testr, split="//.")
strsplit(testr, split="//..")
sapply(strsplit(testr, "."), `[`, 3)
sapply(strsplit(testr, "_"), `[`, 3)
sapply(strsplit(testr, "_"), `[`, 1)
sapply(strsplit(testr, "."), `[`, 1)
gsub(".*_.*_(.*)", "\\1", testr)
gsub(".*..*_(.*)", "\\1", testr)
gsub(".*..*.(.*)", "\\1", testr)
gsub(".*_.*.(.*)", "\\1", testr)
gsub(".*_.*.(.*)", "\\1", testr)
sapply(strsplit(testr, "."), "[", 2)
sapply(strsplit(testr, "."), "[", 3)
sapply(strsplit(testr, "."), "[", 1)
sapply(strsplit(testr, "."), "[", 1)
gsub("[A-Z][1-9]:", "", testr)
gsub("[A-Z][1-9].", "", testr)
gsub("[A-Z][1-9].", ".", testr)
gsub("[A-Z][1-9]", ".", testr)
gsub("^.*:","", testr)
testy <- "Sr:K:alpha"
gsub("^.*:","", testy)
gsub("[A-Z][1-9]//.", ".", testr)
gsub("[A-Z][1-9]\\.", ".", testr)
strsplit(x="strsplit.aslo.uses.regular.expressions", split="\\.")
strsplit(x=testr, split="\\.")
example <- strsplit(x=testr, split="\\.")
example
example[[1]]
example[[1]][1]
example[[1]][2]
elementNames <- c("Ne.K.alpha", "Ne.K.beta", "Na.K.alpha", "Na.K.beta", "Mg.K.alpha", "Mg.K.beta", "Al.K.alpha", "Al.K.beta", "Si.K.alpha", "Si.K.beta", "P.K.alpha", "P.K.beta", "S.K.alpha", "S.K.beta", "Cl.K.alpha", "Cl.K.beta", "Ar.K.alpha", "Ar.K.beta", "K.K.alpha", "K.K.beta", "Ca.K.alpha", "Ca.K.beta", "Sc.K.alpha", "Sc.K.beta", "Ti.K.alpha", "Ti.K.beta", "V.K.alpha", "V.K.beta", "Cr.K.alpha", "Cr.K.beta", "Mn.K.alpha", "Mn.K.beta", "Fe.K.alpha", "Fe.K.beta", "Co.K.alpha", "Co.K.beta", "Ni.K.alpha", "Ni.K.beta", "Cu.K.alpha", "Cu.K.beta", "Zn.K.alpha", "Zn.K.beta", "Ga.K.alpha", "Ga.K.beta", "Ge.K.alpha", "Ge.K.beta", "As.K.alpha", "As.K.beta", "Se.K.alpha", "Se.K.beta", "Br.K.alpha", "Br.K.beta", "Kr.K.alpha", "Kr.K.beta", "Rb.K.alpha", "Rb.K.beta", "Sr.K.alpha", "Sr.K.beta", "Y.K.beta", "Y.K.alpha", "Zr.K.alpha", "Zr.K.beta", "Nb.K.alpha", "Nb.K.beta", "Mo.K.alpha", "Mo.K.beta", "Mo.L.alpha", "Mo.L.beta", "Ru.K.alpha", "Ru.K.beta", "Ru.L.alpha", "Ru.L.beta", "Rh.K.alpha", "Rh.K.beta", "Rh.L.alpha", "Rh.L.beta", "Pd.K.alpha", "Pd.K.beta", "Pd.L.alpha", "Pd.L.beta", "Ag.K.alpha", "Ag.K.beta", "Ag.L.alpha", "Ag.L.beta", "Cd.K.alpha", "Cd.K.beta", "Cd.L.alpha", "Cd.L.beta", " In.K.alpha", "In.K.beta", "In.L.alpha", "Sn.K.alpha", "Sn.K.beta", "Sn.L.alpha", "Sn.L.beta", "Sb.K.alpha", "Sb.K.beta", "Sb.L.alpha", "Sb.L.beta", "Te.K.alpha", "Te.K.beta", "Te.L.alpha", "Te.L.beta", "I.K.alpha", "I.K.beta", "I.L.alpha", "I.L.beta", "Xe.K.alpha", "Xe.K.beta", "Xe.L.alpha", "Xe.L.beta", "Cs.K.alpha", "Cs.K.beta", "Cs.L.alpha", "Cs.L.beta", "Ba.K.alpha", "Ba.K.beta", "Ba.L.alpha", "Ba.L.beta", "La.K.alpha", "La.K.beta", "La.L.alpha", "La.L.beta", "Ce.K.alpha", "Ce.K.beta", "Ce.L.alpha", "Ce.L.beta", "Pr.K.alpha", "Pr.K.beta", "Pr.L.alpha", "Pr.L.beta", "Nd.K.alpha", "Nd.K.beta", "Nd.L.alpha", "Nd.L.beta", "Pm.L.alpha", "Pm.L.beta", "Sm.L.alpha", "Sm.L.beta", "Eu.L.alpha", "Eu.L.beta", "Gd.L.alpha", "Gd.L.beta", "Tb.L.alpha", "Tb.L.beta", "Dy.L.alpha", "Dy.L.beta", "Ho.L.alpha", "Ho.L.beta", "Er.L.alpha", "Er.L.beta", "Tm.L.alpha", "Tm.L.beta", "Yb.L.alpha", "Yb.L.beta", "Lu.L.alpha", "Lu.L.beta", "Hf.L.alpha", "Hf.L.beta", "Ta.L.alpha", "Ta.L.beta", "W.L.alpha", "W.L.beta", "Re.L.alpha", "Re.L.beta", "Os.L.alpha", "Os.L.beta", "Ir.L.alpha", "Ir.L.beta", "Pt.L.alpha", "Pt.L.beta", "Au.L.alpha", "Au.L.beta", "Hg.L.alpha", "Hg.L.beta", "Tl.L.alpha", "Tl.L.beta", "Pb.L.alpha", "Pb.L.beta", "Bi.L.alpha", "Bi.L.beta", "Po.L.alpha", "Po.L.beta", "At.L.alpha", "At.L.beta", "Rn.L.alpha", "Rn.L.beta", "Fr.L.alpha", "Fr.L.beta", "Ra.L.alpha", "Ra.L.beta", "Ac.L.alpha", "Ac.L.beta", "Th.L.alpha", "Th.L.beta", "Pa.L.alpha", "Pa.L.beta", "U.L.alpha", "U.L.beta", "Pu.L.alpha", "Pu.L.beta")
setwd("~/GitHub/CloudCal/data")
black.diamond <- read.csv("data/blackdiamond.csv", header=FALSE, sep=",")#
black.diamond.melt <- read.csv(file="data/blackdiamondmelt.csv")
black.diamond <- read.csv("blackdiamond.csv", header=FALSE, sep=",")#
black.diamond.melt <- read.csv(file="blackdiamondmelt.csv")
elementGrabKalpha <- function(element, data) {#
    element <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[6]-0.02 | data$Energy > elementLine[5]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[6]-0.02 | data$Energy > elementLine[5]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-alpha", sep=" ")#
    hold.ag#
}#
#
elementGrabKbeta <- function(element, data) {#
    element <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[8]-0.02 | data$Energy > elementLine[7]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[8]-0.02 | data$Energy > elementLine[7]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-beta", sep=" ")#
    hold.ag#
}#
#
elementGrabLalpha <- function(element, data) {#
    element <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[11]-0.02 | data$Energy > elementLine[10]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[11]-0.02 | data$Energy > elementLine[10]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-alpha", sep=" ")#
    hold.ag#
}#
#
elementGrabLbeta <- function(element, data) {#
    element <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[13]-0.02 | data$Energy > elementLine[12]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[13]-0.02 | data$Energy > elementLine[12]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-beta", sep=" ")#
    hold.ag#
}#
#
elementGrab <- function(element.line, data) {#
    element <- strsplit(x=element.line, split="\\.")[[1]][1]#
    destination <- strsplit(x=element.line, split="\\.")[[1]][2]#
    distance <- strsplit(x=element.line, split="\\.")[[1]][3]#
    elementSelection <- if(destination=="K" && distance=="alpha"){#
        elementGrabKalpha(element, data)#
    } else if(destination=="K" && distance=="beta"){#
        elementGrabKbeta(element, data)#
    } else if(destination=="L" && distance=="alpha"){#
        elementGrabLalpha(element, data)#
    } else if (destination=="L" && distance=="beta"){#
        elementGrabLbeta(element, data)#
    }#
    elementSelection#
}
elementGrabKalpha("Sr", black.diamond.melt)
elementGrabKalpha <- function(element, data) {#
    element <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[6]-0.02 | data$Energy > elementLine[5]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[6]-0.02 | data$Energy > elementLine[5]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabKbeta <- function(element, data) {#
    element <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[8]-0.02 | data$Energy > elementLine[7]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[8]-0.02 | data$Energy > elementLine[7]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-beta", sep=" "))#
    hold.ag#
}#
#
elementGrabLalpha <- function(element, data) {#
    element <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[11]-0.02 | data$Energy > elementLine[10]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[11]-0.02 | data$Energy > elementLine[10]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabLbeta <- function(element, data) {#
    element <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[13]-0.02 | data$Energy > elementLine[12]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[13]-0.02 | data$Energy > elementLine[12]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-beta", sep=" "))#
    hold.ag#
}
elementGrabKalpha("Sr", black.diamond.melt)
fluorescence.lines <- read.csv("FluorescenceLines.csv")
elementGrabKalpha("Sr", black.diamond.melt)
elementGrabKalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[6]-0.02 | data$Energy > elementLine[5]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[6]-0.02 | data$Energy > elementLine[5]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabKbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[8]-0.02 | data$Energy > elementLine[7]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[8]-0.02 | data$Energy > elementLine[7]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-beta", sep=" "))#
    hold.ag#
}#
#
elementGrabLalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[11]-0.02 | data$Energy > elementLine[10]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[11]-0.02 | data$Energy > elementLine[10]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabLbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[13]-0.02 | data$Energy > elementLine[12]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[13]-0.02 | data$Energy > elementLine[12]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-beta", sep=" "))#
    hold.ag#
}
elementGrabKalpha("Sr", black.diamond.melt)
head(fluorescence.lines)
elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol=="Sr")
elementLine
data <- black.diamond.melt
head(black.diamond.melt)
elementLine[6]
elementLine[11]
elementLine[13]
elementLine[14]
elementGrabKalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[5]-0.02 | data$Energy > elementLine[6]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[5]-0.02 | data$Energy > elementLine[6]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabKbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[7]-0.02 | data$Energy > elementLine[8]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[7]-0.02 | data$Energy > elementLine[8]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-beta", sep=" "))#
    hold.ag#
}#
#
elementGrabLalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[10]-0.02 | data$Energy > elementLine[11]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[10]-0.02 | data$Energy > elementLine[11]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabLbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[12]-0.02 | data$Energy > elementLine[14]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[12]-0.02 | data$Energy > elementLine[14]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-beta", sep=" "))#
    hold.ag#
}
elementGrabKalpha("Sr", black.diamond.melt)
elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol=="Sr")
elementLine
hold.cps <- subset(data$CPS, !(data$Energy < elementLine[5]-0.02 | data$Energy > elementLine[6]+0.02))
hold.cps
data <- black.diamond.melt
hold.cps
hold.cps <- subset(data$CPS, !(data$Energy < elementLine[5]-0.02 | data$Energy > elementLine[6]+0.02))
hold.cps
elementLine[5]
head(data)
hold.cps <- subset(data$CPS, !(data$Energy < elementLine[5][1,]-0.02 | data$Energy > elementLine[6][1,]+0.02))
hold.cps
elementLine[5][1,]
hold.cps <- subset(data$CPS, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))
hold.cps
elementGrabKalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabKbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[8][1,]-0.02 | data$Energy > elementLine[7][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[8][1,]-0.02 | data$Energy > elementLine[7][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-beta", sep=" "))#
    hold.ag#
}#
#
elementGrabLalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabLbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[14][1,]-0.02 | data$Energy > elementLine[12][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[14][1,]-0.02 | data$Energy > elementLine[12][1,]+0.02))#
#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-beta", sep=" "))#
    hold.ag#
}
elementGrabKalpha()
elementGrabKalpha(elementLine, data)
elementGrabKalpha("Sr", data)
elementGrab <- function(element.line, data) {#
    element <- strsplit(x=element.line, split="\\.")[[1]][1]#
    destination <- strsplit(x=element.line, split="\\.")[[1]][2]#
    distance <- strsplit(x=element.line, split="\\.")[[1]][3]#
    elementSelection <- if(destination=="K" && distance=="alpha"){#
        elementGrabKalpha(element, data)#
    } else if(destination=="K" && distance=="beta"){#
        elementGrabKbeta(element, data)#
    } else if(destination=="L" && distance=="alpha"){#
        elementGrabLalpha(element, data)#
    } else if (destination=="L" && distance=="beta"){#
        elementGrabLbeta(element, data)#
    }#
    elementSelection#
}
elementGrab("Sr.K.alpha", data)
elementGrab("Sr.K.beta", data)
elementGrab("Sr.L.alpha", data)
elementLine[8][1,]
elementLine[7]
hold.cps <- subset(data$CPS, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))
hold.cps
elementGrabKbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-beta", sep=" "))#
    hold.ag#
}
elementGrab("Sr.K.beta", data)
hold.cps <- subset(data$CPS, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][1,]+0.02))
hold.cps
elementLine[11]
elementLine[10]
elementGrab("Sr.L.alpha", data)
elementGrab("Pb.L.alpha", data)
hold.cps <- subset(data$CPS, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][1,]+0.02))
hold.cps
hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10]+0.02))
elementGrabLalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][,1]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-alpha", sep=" "))#
    hold.ag#
}
elementGrab("Pb.L.alpha", data)
elementGrabLbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[14][1,]-0.02 | data$Energy > elementLine[12][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[14][1,]-0.02 | data$Energy > elementLine[12][1,]+0.02))#
#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-beta", sep=" "))#
    hold.ag#
}
elementGrab("Pb.L.beta", data)
elementLine[14]
elementLine[12]
elementGrabLbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-beta", sep=" "))#
    hold.ag#
}
elementGrab("Pb.L.beta", data)
